
02_MPU6050_wakeup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a30  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08003bc8  08003bc8  00004bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c1c  08003c1c  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003c1c  08003c1c  00004c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c24  08003c24  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c24  08003c24  00004c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c28  08003c28  00004c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003c2c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000068  08003c94  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  08003c94  00005274  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a4af  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000188d  00000000  00000000  0000f547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c0  00000000  00000000  00010dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000799  00000000  00000000  00011798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a1b  00000000  00000000  00011f31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c1c1  00000000  00000000  0002894c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089ed6  00000000  00000000  00034b0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000be9e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002eac  00000000  00000000  000bea28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  000c18d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000068 	.word	0x20000068
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003bb0 	.word	0x08003bb0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000006c 	.word	0x2000006c
 80001d4:	08003bb0 	.word	0x08003bb0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800050c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000510:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000514:	f003 0301 	and.w	r3, r3, #1
 8000518:	2b00      	cmp	r3, #0
 800051a:	d013      	beq.n	8000544 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800051c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000520:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000524:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000528:	2b00      	cmp	r3, #0
 800052a:	d00b      	beq.n	8000544 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800052c:	e000      	b.n	8000530 <ITM_SendChar+0x2c>
    {
      __NOP();
 800052e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000530:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d0f9      	beq.n	800052e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800053a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800053e:	687a      	ldr	r2, [r7, #4]
 8000540:	b2d2      	uxtb	r2, r2
 8000542:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000544:	687b      	ldr	r3, [r7, #4]
}
 8000546:	4618      	mov	r0, r3
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
	...

08000554 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
	//Use printf with UART
int _write(int fd, char *ptr, int len) {
 8000554:	b580      	push	{r7, lr}
 8000556:	b086      	sub	sp, #24
 8000558:	af00      	add	r7, sp, #0
 800055a:	60f8      	str	r0, [r7, #12]
 800055c:	60b9      	str	r1, [r7, #8]
 800055e:	607a      	str	r2, [r7, #4]

    if (fd == 1) {
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	2b01      	cmp	r3, #1
 8000564:	d111      	bne.n	800058a <_write+0x36>
        HAL_StatusTypeDef hstatus;
        hstatus = HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	b29a      	uxth	r2, r3
 800056a:	f04f 33ff 	mov.w	r3, #4294967295
 800056e:	68b9      	ldr	r1, [r7, #8]
 8000570:	4814      	ldr	r0, [pc, #80]	@ (80005c4 <_write+0x70>)
 8000572:	f002 fab5 	bl	8002ae0 <HAL_UART_Transmit>
 8000576:	4603      	mov	r3, r0
 8000578:	74fb      	strb	r3, [r7, #19]
        if (hstatus == HAL_OK)
 800057a:	7cfb      	ldrb	r3, [r7, #19]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d101      	bne.n	8000584 <_write+0x30>
            return len;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	e01a      	b.n	80005ba <_write+0x66>
        else
            return -1;
 8000584:	f04f 33ff 	mov.w	r3, #4294967295
 8000588:	e017      	b.n	80005ba <_write+0x66>
    } else if (fd == 2) {
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	2b02      	cmp	r3, #2
 800058e:	d112      	bne.n	80005b6 <_write+0x62>
        for (int i = 0; i < len; i++) {
 8000590:	2300      	movs	r3, #0
 8000592:	617b      	str	r3, [r7, #20]
 8000594:	e009      	b.n	80005aa <_write+0x56>
            ITM_SendChar(ptr[i]); /* core_cm4.h */
 8000596:	697b      	ldr	r3, [r7, #20]
 8000598:	68ba      	ldr	r2, [r7, #8]
 800059a:	4413      	add	r3, r2
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	4618      	mov	r0, r3
 80005a0:	f7ff ffb0 	bl	8000504 <ITM_SendChar>
        for (int i = 0; i < len; i++) {
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	3301      	adds	r3, #1
 80005a8:	617b      	str	r3, [r7, #20]
 80005aa:	697a      	ldr	r2, [r7, #20]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	429a      	cmp	r2, r3
 80005b0:	dbf1      	blt.n	8000596 <_write+0x42>
        }
        return len;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	e001      	b.n	80005ba <_write+0x66>
    }
    return -1;
 80005b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	3718      	adds	r7, #24
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	200000d8 	.word	0x200000d8

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ce:	f000 fadf 	bl	8000b90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d2:	f000 f837 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d6:	f000 f8f5 	bl	80007c4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005da:	f000 f89b 	bl	8000714 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80005de:	f000 f8c7 	bl	8000770 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //Wake up MCU by setting the sleep bit to 0
  uint8_t pwrdata = 0x00;
 80005e2:	2300      	movs	r3, #0
 80005e4:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1, 1, &pwrdata, 1, HAL_MAX_DELAY);
 80005e6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ea:	9302      	str	r3, [sp, #8]
 80005ec:	2301      	movs	r3, #1
 80005ee:	9301      	str	r3, [sp, #4]
 80005f0:	1dfb      	adds	r3, r7, #7
 80005f2:	9300      	str	r3, [sp, #0]
 80005f4:	2301      	movs	r3, #1
 80005f6:	226b      	movs	r2, #107	@ 0x6b
 80005f8:	21d0      	movs	r1, #208	@ 0xd0
 80005fa:	480f      	ldr	r0, [pc, #60]	@ (8000638 <main+0x70>)
 80005fc:	f000 fee8 	bl	80013d0 <HAL_I2C_Mem_Write>


  //Verify if the MPU6050 is working by reading the WHO_AM_I register
  uint8_t who_am_i = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Mem_Read(&hi2c1,MPU6050_ADDR, WHO_AM_I, 1, &who_am_i, 1, HAL_MAX_DELAY);
 8000604:	f04f 33ff 	mov.w	r3, #4294967295
 8000608:	9302      	str	r3, [sp, #8]
 800060a:	2301      	movs	r3, #1
 800060c:	9301      	str	r3, [sp, #4]
 800060e:	1dbb      	adds	r3, r7, #6
 8000610:	9300      	str	r3, [sp, #0]
 8000612:	2301      	movs	r3, #1
 8000614:	2275      	movs	r2, #117	@ 0x75
 8000616:	21d0      	movs	r1, #208	@ 0xd0
 8000618:	4807      	ldr	r0, [pc, #28]	@ (8000638 <main+0x70>)
 800061a:	f000 ffd3 	bl	80015c4 <HAL_I2C_Mem_Read>

  if(who_am_i == 0x68){
 800061e:	79bb      	ldrb	r3, [r7, #6]
 8000620:	2b68      	cmp	r3, #104	@ 0x68
 8000622:	d103      	bne.n	800062c <main+0x64>
	  printf("MPU6050 Connected successfully \n");
 8000624:	4805      	ldr	r0, [pc, #20]	@ (800063c <main+0x74>)
 8000626:	f002 ff2f 	bl	8003488 <puts>
 800062a:	e003      	b.n	8000634 <main+0x6c>
  }
  else{
	  printf("MPU6050 couldn't connect\n");
 800062c:	4804      	ldr	r0, [pc, #16]	@ (8000640 <main+0x78>)
 800062e:	f002 ff2b 	bl	8003488 <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000632:	bf00      	nop
 8000634:	bf00      	nop
 8000636:	e7fd      	b.n	8000634 <main+0x6c>
 8000638:	20000084 	.word	0x20000084
 800063c:	08003bc8 	.word	0x08003bc8
 8000640:	08003be8 	.word	0x08003be8

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	@ 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	2230      	movs	r2, #48	@ 0x30
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f002 fff8 	bl	8003648 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	4b27      	ldr	r3, [pc, #156]	@ (800070c <SystemClock_Config+0xc8>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000670:	4a26      	ldr	r2, [pc, #152]	@ (800070c <SystemClock_Config+0xc8>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	@ 0x40
 8000678:	4b24      	ldr	r3, [pc, #144]	@ (800070c <SystemClock_Config+0xc8>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	4b21      	ldr	r3, [pc, #132]	@ (8000710 <SystemClock_Config+0xcc>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a20      	ldr	r2, [pc, #128]	@ (8000710 <SystemClock_Config+0xcc>)
 800068e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	4b1e      	ldr	r3, [pc, #120]	@ (8000710 <SystemClock_Config+0xcc>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a0:	2301      	movs	r3, #1
 80006a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80006b4:	230c      	movs	r3, #12
 80006b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006b8:	2360      	movs	r3, #96	@ 0x60
 80006ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006bc:	2302      	movs	r3, #2
 80006be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006c0:	2304      	movs	r3, #4
 80006c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 0320 	add.w	r3, r7, #32
 80006c8:	4618      	mov	r0, r3
 80006ca:	f001 fd61 	bl	8002190 <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d4:	f000 f8ac 	bl	8000830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	230f      	movs	r3, #15
 80006da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006dc:	2302      	movs	r3, #2
 80006de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006ee:	f107 030c 	add.w	r3, r7, #12
 80006f2:	2103      	movs	r1, #3
 80006f4:	4618      	mov	r0, r3
 80006f6:	f001 ffc3 	bl	8002680 <HAL_RCC_ClockConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000700:	f000 f896 	bl	8000830 <Error_Handler>
  }
}
 8000704:	bf00      	nop
 8000706:	3750      	adds	r7, #80	@ 0x50
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40023800 	.word	0x40023800
 8000710:	40007000 	.word	0x40007000

08000714 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000718:	4b12      	ldr	r3, [pc, #72]	@ (8000764 <MX_I2C1_Init+0x50>)
 800071a:	4a13      	ldr	r2, [pc, #76]	@ (8000768 <MX_I2C1_Init+0x54>)
 800071c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800071e:	4b11      	ldr	r3, [pc, #68]	@ (8000764 <MX_I2C1_Init+0x50>)
 8000720:	4a12      	ldr	r2, [pc, #72]	@ (800076c <MX_I2C1_Init+0x58>)
 8000722:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000724:	4b0f      	ldr	r3, [pc, #60]	@ (8000764 <MX_I2C1_Init+0x50>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800072a:	4b0e      	ldr	r3, [pc, #56]	@ (8000764 <MX_I2C1_Init+0x50>)
 800072c:	2200      	movs	r2, #0
 800072e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000730:	4b0c      	ldr	r3, [pc, #48]	@ (8000764 <MX_I2C1_Init+0x50>)
 8000732:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000736:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000738:	4b0a      	ldr	r3, [pc, #40]	@ (8000764 <MX_I2C1_Init+0x50>)
 800073a:	2200      	movs	r2, #0
 800073c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800073e:	4b09      	ldr	r3, [pc, #36]	@ (8000764 <MX_I2C1_Init+0x50>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000744:	4b07      	ldr	r3, [pc, #28]	@ (8000764 <MX_I2C1_Init+0x50>)
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800074a:	4b06      	ldr	r3, [pc, #24]	@ (8000764 <MX_I2C1_Init+0x50>)
 800074c:	2200      	movs	r2, #0
 800074e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000750:	4804      	ldr	r0, [pc, #16]	@ (8000764 <MX_I2C1_Init+0x50>)
 8000752:	f000 fcf9 	bl	8001148 <HAL_I2C_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800075c:	f000 f868 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000084 	.word	0x20000084
 8000768:	40005400 	.word	0x40005400
 800076c:	000186a0 	.word	0x000186a0

08000770 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000774:	4b11      	ldr	r3, [pc, #68]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 8000776:	4a12      	ldr	r2, [pc, #72]	@ (80007c0 <MX_USART2_UART_Init+0x50>)
 8000778:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800077a:	4b10      	ldr	r3, [pc, #64]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 800077c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000780:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000782:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000788:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800078e:	4b0b      	ldr	r3, [pc, #44]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000794:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 8000796:	220c      	movs	r2, #12
 8000798:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079a:	4b08      	ldr	r3, [pc, #32]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a0:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007a6:	4805      	ldr	r0, [pc, #20]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 80007a8:	f002 f94a 	bl	8002a40 <HAL_UART_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007b2:	f000 f83d 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	200000d8 	.word	0x200000d8
 80007c0:	40004400 	.word	0x40004400

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	4b17      	ldr	r3, [pc, #92]	@ (800082c <MX_GPIO_Init+0x68>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	4a16      	ldr	r2, [pc, #88]	@ (800082c <MX_GPIO_Init+0x68>)
 80007d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007da:	4b14      	ldr	r3, [pc, #80]	@ (800082c <MX_GPIO_Init+0x68>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	4b10      	ldr	r3, [pc, #64]	@ (800082c <MX_GPIO_Init+0x68>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	4a0f      	ldr	r2, [pc, #60]	@ (800082c <MX_GPIO_Init+0x68>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f6:	4b0d      	ldr	r3, [pc, #52]	@ (800082c <MX_GPIO_Init+0x68>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	4b09      	ldr	r3, [pc, #36]	@ (800082c <MX_GPIO_Init+0x68>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a08      	ldr	r2, [pc, #32]	@ (800082c <MX_GPIO_Init+0x68>)
 800080c:	f043 0302 	orr.w	r3, r3, #2
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b06      	ldr	r3, [pc, #24]	@ (800082c <MX_GPIO_Init+0x68>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f003 0302 	and.w	r3, r3, #2
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800081e:	bf00      	nop
 8000820:	3714      	adds	r7, #20
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800

08000830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
}
 8000836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <Error_Handler+0x8>

0800083c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	4b10      	ldr	r3, [pc, #64]	@ (8000888 <HAL_MspInit+0x4c>)
 8000848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800084a:	4a0f      	ldr	r2, [pc, #60]	@ (8000888 <HAL_MspInit+0x4c>)
 800084c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000850:	6453      	str	r3, [r2, #68]	@ 0x44
 8000852:	4b0d      	ldr	r3, [pc, #52]	@ (8000888 <HAL_MspInit+0x4c>)
 8000854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000856:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	4b09      	ldr	r3, [pc, #36]	@ (8000888 <HAL_MspInit+0x4c>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000866:	4a08      	ldr	r2, [pc, #32]	@ (8000888 <HAL_MspInit+0x4c>)
 8000868:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800086c:	6413      	str	r3, [r2, #64]	@ 0x40
 800086e:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <HAL_MspInit+0x4c>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000872:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800

0800088c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	@ 0x28
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a19      	ldr	r2, [pc, #100]	@ (8000910 <HAL_I2C_MspInit+0x84>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d12b      	bne.n	8000906 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	4b18      	ldr	r3, [pc, #96]	@ (8000914 <HAL_I2C_MspInit+0x88>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	4a17      	ldr	r2, [pc, #92]	@ (8000914 <HAL_I2C_MspInit+0x88>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008be:	4b15      	ldr	r3, [pc, #84]	@ (8000914 <HAL_I2C_MspInit+0x88>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008ca:	23c0      	movs	r3, #192	@ 0xc0
 80008cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008ce:	2312      	movs	r3, #18
 80008d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d6:	2303      	movs	r3, #3
 80008d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008da:	2304      	movs	r3, #4
 80008dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	4619      	mov	r1, r3
 80008e4:	480c      	ldr	r0, [pc, #48]	@ (8000918 <HAL_I2C_MspInit+0x8c>)
 80008e6:	f000 faab 	bl	8000e40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <HAL_I2C_MspInit+0x88>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f2:	4a08      	ldr	r2, [pc, #32]	@ (8000914 <HAL_I2C_MspInit+0x88>)
 80008f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80008fa:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <HAL_I2C_MspInit+0x88>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000906:	bf00      	nop
 8000908:	3728      	adds	r7, #40	@ 0x28
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40005400 	.word	0x40005400
 8000914:	40023800 	.word	0x40023800
 8000918:	40020400 	.word	0x40020400

0800091c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	@ 0x28
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a19      	ldr	r2, [pc, #100]	@ (80009a0 <HAL_UART_MspInit+0x84>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d12b      	bne.n	8000996 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
 8000942:	4b18      	ldr	r3, [pc, #96]	@ (80009a4 <HAL_UART_MspInit+0x88>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000946:	4a17      	ldr	r2, [pc, #92]	@ (80009a4 <HAL_UART_MspInit+0x88>)
 8000948:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800094c:	6413      	str	r3, [r2, #64]	@ 0x40
 800094e:	4b15      	ldr	r3, [pc, #84]	@ (80009a4 <HAL_UART_MspInit+0x88>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	4b11      	ldr	r3, [pc, #68]	@ (80009a4 <HAL_UART_MspInit+0x88>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	4a10      	ldr	r2, [pc, #64]	@ (80009a4 <HAL_UART_MspInit+0x88>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6313      	str	r3, [r2, #48]	@ 0x30
 800096a:	4b0e      	ldr	r3, [pc, #56]	@ (80009a4 <HAL_UART_MspInit+0x88>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000976:	230c      	movs	r3, #12
 8000978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000982:	2303      	movs	r3, #3
 8000984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000986:	2307      	movs	r3, #7
 8000988:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	4619      	mov	r1, r3
 8000990:	4805      	ldr	r0, [pc, #20]	@ (80009a8 <HAL_UART_MspInit+0x8c>)
 8000992:	f000 fa55 	bl	8000e40 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000996:	bf00      	nop
 8000998:	3728      	adds	r7, #40	@ 0x28
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40004400 	.word	0x40004400
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40020000 	.word	0x40020000

080009ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009b0:	bf00      	nop
 80009b2:	e7fd      	b.n	80009b0 <NMI_Handler+0x4>

080009b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b8:	bf00      	nop
 80009ba:	e7fd      	b.n	80009b8 <HardFault_Handler+0x4>

080009bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <MemManage_Handler+0x4>

080009c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <BusFault_Handler+0x4>

080009cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <UsageFault_Handler+0x4>

080009d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr

080009e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr

080009fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a02:	f000 f917 	bl	8000c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b086      	sub	sp, #24
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	60f8      	str	r0, [r7, #12]
 8000a12:	60b9      	str	r1, [r7, #8]
 8000a14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a16:	2300      	movs	r3, #0
 8000a18:	617b      	str	r3, [r7, #20]
 8000a1a:	e00a      	b.n	8000a32 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a1c:	f3af 8000 	nop.w
 8000a20:	4601      	mov	r1, r0
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	1c5a      	adds	r2, r3, #1
 8000a26:	60ba      	str	r2, [r7, #8]
 8000a28:	b2ca      	uxtb	r2, r1
 8000a2a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	617b      	str	r3, [r7, #20]
 8000a32:	697a      	ldr	r2, [r7, #20]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	429a      	cmp	r2, r3
 8000a38:	dbf0      	blt.n	8000a1c <_read+0x12>
  }

  return len;
 8000a3a:	687b      	ldr	r3, [r7, #4]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3718      	adds	r7, #24
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a6c:	605a      	str	r2, [r3, #4]
  return 0;
 8000a6e:	2300      	movs	r3, #0
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <_isatty>:

int _isatty(int file)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a84:	2301      	movs	r3, #1
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a92:	b480      	push	{r7}
 8000a94:	b085      	sub	sp, #20
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	60f8      	str	r0, [r7, #12]
 8000a9a:	60b9      	str	r1, [r7, #8]
 8000a9c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a9e:	2300      	movs	r3, #0
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3714      	adds	r7, #20
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ab4:	4a14      	ldr	r2, [pc, #80]	@ (8000b08 <_sbrk+0x5c>)
 8000ab6:	4b15      	ldr	r3, [pc, #84]	@ (8000b0c <_sbrk+0x60>)
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ac0:	4b13      	ldr	r3, [pc, #76]	@ (8000b10 <_sbrk+0x64>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d102      	bne.n	8000ace <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ac8:	4b11      	ldr	r3, [pc, #68]	@ (8000b10 <_sbrk+0x64>)
 8000aca:	4a12      	ldr	r2, [pc, #72]	@ (8000b14 <_sbrk+0x68>)
 8000acc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ace:	4b10      	ldr	r3, [pc, #64]	@ (8000b10 <_sbrk+0x64>)
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d207      	bcs.n	8000aec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000adc:	f002 fe02 	bl	80036e4 <__errno>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	220c      	movs	r2, #12
 8000ae4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aea:	e009      	b.n	8000b00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aec:	4b08      	ldr	r3, [pc, #32]	@ (8000b10 <_sbrk+0x64>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000af2:	4b07      	ldr	r3, [pc, #28]	@ (8000b10 <_sbrk+0x64>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4413      	add	r3, r2
 8000afa:	4a05      	ldr	r2, [pc, #20]	@ (8000b10 <_sbrk+0x64>)
 8000afc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000afe:	68fb      	ldr	r3, [r7, #12]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3718      	adds	r7, #24
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20020000 	.word	0x20020000
 8000b0c:	00000400 	.word	0x00000400
 8000b10:	20000120 	.word	0x20000120
 8000b14:	20000278 	.word	0x20000278

08000b18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b1c:	4b06      	ldr	r3, [pc, #24]	@ (8000b38 <SystemInit+0x20>)
 8000b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b22:	4a05      	ldr	r2, [pc, #20]	@ (8000b38 <SystemInit+0x20>)
 8000b24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b74 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b40:	f7ff ffea 	bl	8000b18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b44:	480c      	ldr	r0, [pc, #48]	@ (8000b78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b46:	490d      	ldr	r1, [pc, #52]	@ (8000b7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b48:	4a0d      	ldr	r2, [pc, #52]	@ (8000b80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b4c:	e002      	b.n	8000b54 <LoopCopyDataInit>

08000b4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b52:	3304      	adds	r3, #4

08000b54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b58:	d3f9      	bcc.n	8000b4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b5c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b60:	e001      	b.n	8000b66 <LoopFillZerobss>

08000b62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b64:	3204      	adds	r2, #4

08000b66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b68:	d3fb      	bcc.n	8000b62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b6a:	f002 fdc1 	bl	80036f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b6e:	f7ff fd2b 	bl	80005c8 <main>
  bx  lr    
 8000b72:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b7c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000b80:	08003c2c 	.word	0x08003c2c
  ldr r2, =_sbss
 8000b84:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000b88:	20000274 	.word	0x20000274

08000b8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b8c:	e7fe      	b.n	8000b8c <ADC_IRQHandler>
	...

08000b90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b94:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd0 <HAL_Init+0x40>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd0 <HAL_Init+0x40>)
 8000b9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd0 <HAL_Init+0x40>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd0 <HAL_Init+0x40>)
 8000ba6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000baa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bac:	4b08      	ldr	r3, [pc, #32]	@ (8000bd0 <HAL_Init+0x40>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a07      	ldr	r2, [pc, #28]	@ (8000bd0 <HAL_Init+0x40>)
 8000bb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb8:	2003      	movs	r0, #3
 8000bba:	f000 f90d 	bl	8000dd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bbe:	200f      	movs	r0, #15
 8000bc0:	f000 f808 	bl	8000bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc4:	f7ff fe3a 	bl	800083c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40023c00 	.word	0x40023c00

08000bd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bdc:	4b12      	ldr	r3, [pc, #72]	@ (8000c28 <HAL_InitTick+0x54>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b12      	ldr	r3, [pc, #72]	@ (8000c2c <HAL_InitTick+0x58>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	4619      	mov	r1, r3
 8000be6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 f917 	bl	8000e26 <HAL_SYSTICK_Config>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e00e      	b.n	8000c20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2b0f      	cmp	r3, #15
 8000c06:	d80a      	bhi.n	8000c1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	f000 f8ed 	bl	8000dee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c14:	4a06      	ldr	r2, [pc, #24]	@ (8000c30 <HAL_InitTick+0x5c>)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e000      	b.n	8000c20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000000 	.word	0x20000000
 8000c2c:	20000008 	.word	0x20000008
 8000c30:	20000004 	.word	0x20000004

08000c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c38:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <HAL_IncTick+0x20>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <HAL_IncTick+0x24>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	4a04      	ldr	r2, [pc, #16]	@ (8000c58 <HAL_IncTick+0x24>)
 8000c46:	6013      	str	r3, [r2, #0]
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	20000008 	.word	0x20000008
 8000c58:	20000124 	.word	0x20000124

08000c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c60:	4b03      	ldr	r3, [pc, #12]	@ (8000c70 <HAL_GetTick+0x14>)
 8000c62:	681b      	ldr	r3, [r3, #0]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	20000124 	.word	0x20000124

08000c74 <__NVIC_SetPriorityGrouping>:
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c84:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c8a:	68ba      	ldr	r2, [r7, #8]
 8000c8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c90:	4013      	ands	r3, r2
 8000c92:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ca0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca6:	4a04      	ldr	r2, [pc, #16]	@ (8000cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	60d3      	str	r3, [r2, #12]
}
 8000cac:	bf00      	nop
 8000cae:	3714      	adds	r7, #20
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <__NVIC_GetPriorityGrouping>:
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc0:	4b04      	ldr	r3, [pc, #16]	@ (8000cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	0a1b      	lsrs	r3, r3, #8
 8000cc6:	f003 0307 	and.w	r3, r3, #7
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <__NVIC_SetPriority>:
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	6039      	str	r1, [r7, #0]
 8000ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	db0a      	blt.n	8000d02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	490c      	ldr	r1, [pc, #48]	@ (8000d24 <__NVIC_SetPriority+0x4c>)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	0112      	lsls	r2, r2, #4
 8000cf8:	b2d2      	uxtb	r2, r2
 8000cfa:	440b      	add	r3, r1
 8000cfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000d00:	e00a      	b.n	8000d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	4908      	ldr	r1, [pc, #32]	@ (8000d28 <__NVIC_SetPriority+0x50>)
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	f003 030f 	and.w	r3, r3, #15
 8000d0e:	3b04      	subs	r3, #4
 8000d10:	0112      	lsls	r2, r2, #4
 8000d12:	b2d2      	uxtb	r2, r2
 8000d14:	440b      	add	r3, r1
 8000d16:	761a      	strb	r2, [r3, #24]
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	e000e100 	.word	0xe000e100
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <NVIC_EncodePriority>:
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b089      	sub	sp, #36	@ 0x24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	f1c3 0307 	rsb	r3, r3, #7
 8000d46:	2b04      	cmp	r3, #4
 8000d48:	bf28      	it	cs
 8000d4a:	2304      	movcs	r3, #4
 8000d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3304      	adds	r3, #4
 8000d52:	2b06      	cmp	r3, #6
 8000d54:	d902      	bls.n	8000d5c <NVIC_EncodePriority+0x30>
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3b03      	subs	r3, #3
 8000d5a:	e000      	b.n	8000d5e <NVIC_EncodePriority+0x32>
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	f04f 32ff 	mov.w	r2, #4294967295
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43da      	mvns	r2, r3
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	401a      	ands	r2, r3
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d74:	f04f 31ff 	mov.w	r1, #4294967295
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7e:	43d9      	mvns	r1, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	4313      	orrs	r3, r2
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3724      	adds	r7, #36	@ 0x24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
	...

08000d94 <SysTick_Config>:
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000da4:	d301      	bcc.n	8000daa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000da6:	2301      	movs	r3, #1
 8000da8:	e00f      	b.n	8000dca <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000daa:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd4 <SysTick_Config+0x40>)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3b01      	subs	r3, #1
 8000db0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000db2:	210f      	movs	r1, #15
 8000db4:	f04f 30ff 	mov.w	r0, #4294967295
 8000db8:	f7ff ff8e 	bl	8000cd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dbc:	4b05      	ldr	r3, [pc, #20]	@ (8000dd4 <SysTick_Config+0x40>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dc2:	4b04      	ldr	r3, [pc, #16]	@ (8000dd4 <SysTick_Config+0x40>)
 8000dc4:	2207      	movs	r2, #7
 8000dc6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	e000e010 	.word	0xe000e010

08000dd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f7ff ff47 	bl	8000c74 <__NVIC_SetPriorityGrouping>
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b086      	sub	sp, #24
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	4603      	mov	r3, r0
 8000df6:	60b9      	str	r1, [r7, #8]
 8000df8:	607a      	str	r2, [r7, #4]
 8000dfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e00:	f7ff ff5c 	bl	8000cbc <__NVIC_GetPriorityGrouping>
 8000e04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	68b9      	ldr	r1, [r7, #8]
 8000e0a:	6978      	ldr	r0, [r7, #20]
 8000e0c:	f7ff ff8e 	bl	8000d2c <NVIC_EncodePriority>
 8000e10:	4602      	mov	r2, r0
 8000e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e16:	4611      	mov	r1, r2
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff ff5d 	bl	8000cd8 <__NVIC_SetPriority>
}
 8000e1e:	bf00      	nop
 8000e20:	3718      	adds	r7, #24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f7ff ffb0 	bl	8000d94 <SysTick_Config>
 8000e34:	4603      	mov	r3, r0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b089      	sub	sp, #36	@ 0x24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e56:	2300      	movs	r3, #0
 8000e58:	61fb      	str	r3, [r7, #28]
 8000e5a:	e159      	b.n	8001110 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	697a      	ldr	r2, [r7, #20]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	f040 8148 	bne.w	800110a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f003 0303 	and.w	r3, r3, #3
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d005      	beq.n	8000e92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d130      	bne.n	8000ef4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	2203      	movs	r2, #3
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	68da      	ldr	r2, [r3, #12]
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ec8:	2201      	movs	r2, #1
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	091b      	lsrs	r3, r3, #4
 8000ede:	f003 0201 	and.w	r2, r3, #1
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f003 0303 	and.w	r3, r3, #3
 8000efc:	2b03      	cmp	r3, #3
 8000efe:	d017      	beq.n	8000f30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	2203      	movs	r2, #3
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	43db      	mvns	r3, r3
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4013      	ands	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	689a      	ldr	r2, [r3, #8]
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f003 0303 	and.w	r3, r3, #3
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d123      	bne.n	8000f84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	08da      	lsrs	r2, r3, #3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3208      	adds	r2, #8
 8000f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	f003 0307 	and.w	r3, r3, #7
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	220f      	movs	r2, #15
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	691a      	ldr	r2, [r3, #16]
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	08da      	lsrs	r2, r3, #3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	3208      	adds	r2, #8
 8000f7e:	69b9      	ldr	r1, [r7, #24]
 8000f80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	2203      	movs	r2, #3
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 0203 	and.w	r2, r3, #3
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	f000 80a2 	beq.w	800110a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	4b57      	ldr	r3, [pc, #348]	@ (8001128 <HAL_GPIO_Init+0x2e8>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fce:	4a56      	ldr	r2, [pc, #344]	@ (8001128 <HAL_GPIO_Init+0x2e8>)
 8000fd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fd6:	4b54      	ldr	r3, [pc, #336]	@ (8001128 <HAL_GPIO_Init+0x2e8>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fe2:	4a52      	ldr	r2, [pc, #328]	@ (800112c <HAL_GPIO_Init+0x2ec>)
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	089b      	lsrs	r3, r3, #2
 8000fe8:	3302      	adds	r3, #2
 8000fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	f003 0303 	and.w	r3, r3, #3
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	220f      	movs	r2, #15
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4013      	ands	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a49      	ldr	r2, [pc, #292]	@ (8001130 <HAL_GPIO_Init+0x2f0>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d019      	beq.n	8001042 <HAL_GPIO_Init+0x202>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a48      	ldr	r2, [pc, #288]	@ (8001134 <HAL_GPIO_Init+0x2f4>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d013      	beq.n	800103e <HAL_GPIO_Init+0x1fe>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a47      	ldr	r2, [pc, #284]	@ (8001138 <HAL_GPIO_Init+0x2f8>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d00d      	beq.n	800103a <HAL_GPIO_Init+0x1fa>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a46      	ldr	r2, [pc, #280]	@ (800113c <HAL_GPIO_Init+0x2fc>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d007      	beq.n	8001036 <HAL_GPIO_Init+0x1f6>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a45      	ldr	r2, [pc, #276]	@ (8001140 <HAL_GPIO_Init+0x300>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d101      	bne.n	8001032 <HAL_GPIO_Init+0x1f2>
 800102e:	2304      	movs	r3, #4
 8001030:	e008      	b.n	8001044 <HAL_GPIO_Init+0x204>
 8001032:	2307      	movs	r3, #7
 8001034:	e006      	b.n	8001044 <HAL_GPIO_Init+0x204>
 8001036:	2303      	movs	r3, #3
 8001038:	e004      	b.n	8001044 <HAL_GPIO_Init+0x204>
 800103a:	2302      	movs	r3, #2
 800103c:	e002      	b.n	8001044 <HAL_GPIO_Init+0x204>
 800103e:	2301      	movs	r3, #1
 8001040:	e000      	b.n	8001044 <HAL_GPIO_Init+0x204>
 8001042:	2300      	movs	r3, #0
 8001044:	69fa      	ldr	r2, [r7, #28]
 8001046:	f002 0203 	and.w	r2, r2, #3
 800104a:	0092      	lsls	r2, r2, #2
 800104c:	4093      	lsls	r3, r2
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4313      	orrs	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001054:	4935      	ldr	r1, [pc, #212]	@ (800112c <HAL_GPIO_Init+0x2ec>)
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	089b      	lsrs	r3, r3, #2
 800105a:	3302      	adds	r3, #2
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001062:	4b38      	ldr	r3, [pc, #224]	@ (8001144 <HAL_GPIO_Init+0x304>)
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	43db      	mvns	r3, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4013      	ands	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d003      	beq.n	8001086 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001086:	4a2f      	ldr	r2, [pc, #188]	@ (8001144 <HAL_GPIO_Init+0x304>)
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800108c:	4b2d      	ldr	r3, [pc, #180]	@ (8001144 <HAL_GPIO_Init+0x304>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d003      	beq.n	80010b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010b0:	4a24      	ldr	r2, [pc, #144]	@ (8001144 <HAL_GPIO_Init+0x304>)
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010b6:	4b23      	ldr	r3, [pc, #140]	@ (8001144 <HAL_GPIO_Init+0x304>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	43db      	mvns	r3, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4013      	ands	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d003      	beq.n	80010da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010da:	4a1a      	ldr	r2, [pc, #104]	@ (8001144 <HAL_GPIO_Init+0x304>)
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010e0:	4b18      	ldr	r3, [pc, #96]	@ (8001144 <HAL_GPIO_Init+0x304>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d003      	beq.n	8001104 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001104:	4a0f      	ldr	r2, [pc, #60]	@ (8001144 <HAL_GPIO_Init+0x304>)
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	3301      	adds	r3, #1
 800110e:	61fb      	str	r3, [r7, #28]
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	2b0f      	cmp	r3, #15
 8001114:	f67f aea2 	bls.w	8000e5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001118:	bf00      	nop
 800111a:	bf00      	nop
 800111c:	3724      	adds	r7, #36	@ 0x24
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	40023800 	.word	0x40023800
 800112c:	40013800 	.word	0x40013800
 8001130:	40020000 	.word	0x40020000
 8001134:	40020400 	.word	0x40020400
 8001138:	40020800 	.word	0x40020800
 800113c:	40020c00 	.word	0x40020c00
 8001140:	40021000 	.word	0x40021000
 8001144:	40013c00 	.word	0x40013c00

08001148 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d101      	bne.n	800115a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e12b      	b.n	80013b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b00      	cmp	r3, #0
 8001164:	d106      	bne.n	8001174 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2200      	movs	r2, #0
 800116a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff fb8c 	bl	800088c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2224      	movs	r2, #36	@ 0x24
 8001178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f022 0201 	bic.w	r2, r2, #1
 800118a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800119a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80011aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80011ac:	f001 fc20 	bl	80029f0 <HAL_RCC_GetPCLK1Freq>
 80011b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	4a81      	ldr	r2, [pc, #516]	@ (80013bc <HAL_I2C_Init+0x274>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d807      	bhi.n	80011cc <HAL_I2C_Init+0x84>
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4a80      	ldr	r2, [pc, #512]	@ (80013c0 <HAL_I2C_Init+0x278>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	bf94      	ite	ls
 80011c4:	2301      	movls	r3, #1
 80011c6:	2300      	movhi	r3, #0
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	e006      	b.n	80011da <HAL_I2C_Init+0x92>
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	4a7d      	ldr	r2, [pc, #500]	@ (80013c4 <HAL_I2C_Init+0x27c>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	bf94      	ite	ls
 80011d4:	2301      	movls	r3, #1
 80011d6:	2300      	movhi	r3, #0
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e0e7      	b.n	80013b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	4a78      	ldr	r2, [pc, #480]	@ (80013c8 <HAL_I2C_Init+0x280>)
 80011e6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ea:	0c9b      	lsrs	r3, r3, #18
 80011ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	68ba      	ldr	r2, [r7, #8]
 80011fe:	430a      	orrs	r2, r1
 8001200:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	6a1b      	ldr	r3, [r3, #32]
 8001208:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	4a6a      	ldr	r2, [pc, #424]	@ (80013bc <HAL_I2C_Init+0x274>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d802      	bhi.n	800121c <HAL_I2C_Init+0xd4>
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	3301      	adds	r3, #1
 800121a:	e009      	b.n	8001230 <HAL_I2C_Init+0xe8>
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001222:	fb02 f303 	mul.w	r3, r2, r3
 8001226:	4a69      	ldr	r2, [pc, #420]	@ (80013cc <HAL_I2C_Init+0x284>)
 8001228:	fba2 2303 	umull	r2, r3, r2, r3
 800122c:	099b      	lsrs	r3, r3, #6
 800122e:	3301      	adds	r3, #1
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	6812      	ldr	r2, [r2, #0]
 8001234:	430b      	orrs	r3, r1
 8001236:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001242:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	495c      	ldr	r1, [pc, #368]	@ (80013bc <HAL_I2C_Init+0x274>)
 800124c:	428b      	cmp	r3, r1
 800124e:	d819      	bhi.n	8001284 <HAL_I2C_Init+0x13c>
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	1e59      	subs	r1, r3, #1
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	fbb1 f3f3 	udiv	r3, r1, r3
 800125e:	1c59      	adds	r1, r3, #1
 8001260:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001264:	400b      	ands	r3, r1
 8001266:	2b00      	cmp	r3, #0
 8001268:	d00a      	beq.n	8001280 <HAL_I2C_Init+0x138>
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	1e59      	subs	r1, r3, #1
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	fbb1 f3f3 	udiv	r3, r1, r3
 8001278:	3301      	adds	r3, #1
 800127a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800127e:	e051      	b.n	8001324 <HAL_I2C_Init+0x1dc>
 8001280:	2304      	movs	r3, #4
 8001282:	e04f      	b.n	8001324 <HAL_I2C_Init+0x1dc>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d111      	bne.n	80012b0 <HAL_I2C_Init+0x168>
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	1e58      	subs	r0, r3, #1
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6859      	ldr	r1, [r3, #4]
 8001294:	460b      	mov	r3, r1
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	440b      	add	r3, r1
 800129a:	fbb0 f3f3 	udiv	r3, r0, r3
 800129e:	3301      	adds	r3, #1
 80012a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	bf0c      	ite	eq
 80012a8:	2301      	moveq	r3, #1
 80012aa:	2300      	movne	r3, #0
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	e012      	b.n	80012d6 <HAL_I2C_Init+0x18e>
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	1e58      	subs	r0, r3, #1
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6859      	ldr	r1, [r3, #4]
 80012b8:	460b      	mov	r3, r1
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	440b      	add	r3, r1
 80012be:	0099      	lsls	r1, r3, #2
 80012c0:	440b      	add	r3, r1
 80012c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80012c6:	3301      	adds	r3, #1
 80012c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	bf0c      	ite	eq
 80012d0:	2301      	moveq	r3, #1
 80012d2:	2300      	movne	r3, #0
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <HAL_I2C_Init+0x196>
 80012da:	2301      	movs	r3, #1
 80012dc:	e022      	b.n	8001324 <HAL_I2C_Init+0x1dc>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d10e      	bne.n	8001304 <HAL_I2C_Init+0x1bc>
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	1e58      	subs	r0, r3, #1
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6859      	ldr	r1, [r3, #4]
 80012ee:	460b      	mov	r3, r1
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	440b      	add	r3, r1
 80012f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80012f8:	3301      	adds	r3, #1
 80012fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001302:	e00f      	b.n	8001324 <HAL_I2C_Init+0x1dc>
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	1e58      	subs	r0, r3, #1
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6859      	ldr	r1, [r3, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	440b      	add	r3, r1
 8001312:	0099      	lsls	r1, r3, #2
 8001314:	440b      	add	r3, r1
 8001316:	fbb0 f3f3 	udiv	r3, r0, r3
 800131a:	3301      	adds	r3, #1
 800131c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001320:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001324:	6879      	ldr	r1, [r7, #4]
 8001326:	6809      	ldr	r1, [r1, #0]
 8001328:	4313      	orrs	r3, r2
 800132a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	69da      	ldr	r2, [r3, #28]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6a1b      	ldr	r3, [r3, #32]
 800133e:	431a      	orrs	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	430a      	orrs	r2, r1
 8001346:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001352:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	6911      	ldr	r1, [r2, #16]
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	68d2      	ldr	r2, [r2, #12]
 800135e:	4311      	orrs	r1, r2
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	6812      	ldr	r2, [r2, #0]
 8001364:	430b      	orrs	r3, r1
 8001366:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	695a      	ldr	r2, [r3, #20]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	699b      	ldr	r3, [r3, #24]
 800137a:	431a      	orrs	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	430a      	orrs	r2, r1
 8001382:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f042 0201 	orr.w	r2, r2, #1
 8001392:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2220      	movs	r2, #32
 800139e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	000186a0 	.word	0x000186a0
 80013c0:	001e847f 	.word	0x001e847f
 80013c4:	003d08ff 	.word	0x003d08ff
 80013c8:	431bde83 	.word	0x431bde83
 80013cc:	10624dd3 	.word	0x10624dd3

080013d0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b088      	sub	sp, #32
 80013d4:	af02      	add	r7, sp, #8
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	4608      	mov	r0, r1
 80013da:	4611      	mov	r1, r2
 80013dc:	461a      	mov	r2, r3
 80013de:	4603      	mov	r3, r0
 80013e0:	817b      	strh	r3, [r7, #10]
 80013e2:	460b      	mov	r3, r1
 80013e4:	813b      	strh	r3, [r7, #8]
 80013e6:	4613      	mov	r3, r2
 80013e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80013ea:	f7ff fc37 	bl	8000c5c <HAL_GetTick>
 80013ee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	2b20      	cmp	r3, #32
 80013fa:	f040 80d9 	bne.w	80015b0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	9300      	str	r3, [sp, #0]
 8001402:	2319      	movs	r3, #25
 8001404:	2201      	movs	r2, #1
 8001406:	496d      	ldr	r1, [pc, #436]	@ (80015bc <HAL_I2C_Mem_Write+0x1ec>)
 8001408:	68f8      	ldr	r0, [r7, #12]
 800140a:	f000 fc8b 	bl	8001d24 <I2C_WaitOnFlagUntilTimeout>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001414:	2302      	movs	r3, #2
 8001416:	e0cc      	b.n	80015b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800141e:	2b01      	cmp	r3, #1
 8001420:	d101      	bne.n	8001426 <HAL_I2C_Mem_Write+0x56>
 8001422:	2302      	movs	r3, #2
 8001424:	e0c5      	b.n	80015b2 <HAL_I2C_Mem_Write+0x1e2>
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	2201      	movs	r2, #1
 800142a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	2b01      	cmp	r3, #1
 800143a:	d007      	beq.n	800144c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f042 0201 	orr.w	r2, r2, #1
 800144a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800145a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2221      	movs	r2, #33	@ 0x21
 8001460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2240      	movs	r2, #64	@ 0x40
 8001468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2200      	movs	r2, #0
 8001470:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	6a3a      	ldr	r2, [r7, #32]
 8001476:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800147c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001482:	b29a      	uxth	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	4a4d      	ldr	r2, [pc, #308]	@ (80015c0 <HAL_I2C_Mem_Write+0x1f0>)
 800148c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800148e:	88f8      	ldrh	r0, [r7, #6]
 8001490:	893a      	ldrh	r2, [r7, #8]
 8001492:	8979      	ldrh	r1, [r7, #10]
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	9301      	str	r3, [sp, #4]
 8001498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	4603      	mov	r3, r0
 800149e:	68f8      	ldr	r0, [r7, #12]
 80014a0:	f000 fac2 	bl	8001a28 <I2C_RequestMemoryWrite>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d052      	beq.n	8001550 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e081      	b.n	80015b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014ae:	697a      	ldr	r2, [r7, #20]
 80014b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80014b2:	68f8      	ldr	r0, [r7, #12]
 80014b4:	f000 fd50 	bl	8001f58 <I2C_WaitOnTXEFlagUntilTimeout>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d00d      	beq.n	80014da <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c2:	2b04      	cmp	r3, #4
 80014c4:	d107      	bne.n	80014d6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80014d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e06b      	b.n	80015b2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014de:	781a      	ldrb	r2, [r3, #0]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ea:	1c5a      	adds	r2, r3, #1
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014f4:	3b01      	subs	r3, #1
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001500:	b29b      	uxth	r3, r3
 8001502:	3b01      	subs	r3, #1
 8001504:	b29a      	uxth	r2, r3
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	695b      	ldr	r3, [r3, #20]
 8001510:	f003 0304 	and.w	r3, r3, #4
 8001514:	2b04      	cmp	r3, #4
 8001516:	d11b      	bne.n	8001550 <HAL_I2C_Mem_Write+0x180>
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800151c:	2b00      	cmp	r3, #0
 800151e:	d017      	beq.n	8001550 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001524:	781a      	ldrb	r2, [r3, #0]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001530:	1c5a      	adds	r2, r3, #1
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800153a:	3b01      	subs	r3, #1
 800153c:	b29a      	uxth	r2, r3
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001546:	b29b      	uxth	r3, r3
 8001548:	3b01      	subs	r3, #1
 800154a:	b29a      	uxth	r2, r3
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1aa      	bne.n	80014ae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001558:	697a      	ldr	r2, [r7, #20]
 800155a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800155c:	68f8      	ldr	r0, [r7, #12]
 800155e:	f000 fd43 	bl	8001fe8 <I2C_WaitOnBTFFlagUntilTimeout>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d00d      	beq.n	8001584 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156c:	2b04      	cmp	r3, #4
 800156e:	d107      	bne.n	8001580 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800157e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e016      	b.n	80015b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001592:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2220      	movs	r2, #32
 8001598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80015ac:	2300      	movs	r3, #0
 80015ae:	e000      	b.n	80015b2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80015b0:	2302      	movs	r3, #2
  }
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	00100002 	.word	0x00100002
 80015c0:	ffff0000 	.word	0xffff0000

080015c4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08c      	sub	sp, #48	@ 0x30
 80015c8:	af02      	add	r7, sp, #8
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	4608      	mov	r0, r1
 80015ce:	4611      	mov	r1, r2
 80015d0:	461a      	mov	r2, r3
 80015d2:	4603      	mov	r3, r0
 80015d4:	817b      	strh	r3, [r7, #10]
 80015d6:	460b      	mov	r3, r1
 80015d8:	813b      	strh	r3, [r7, #8]
 80015da:	4613      	mov	r3, r2
 80015dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80015de:	f7ff fb3d 	bl	8000c5c <HAL_GetTick>
 80015e2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	2b20      	cmp	r3, #32
 80015ee:	f040 8214 	bne.w	8001a1a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	2319      	movs	r3, #25
 80015f8:	2201      	movs	r2, #1
 80015fa:	497b      	ldr	r1, [pc, #492]	@ (80017e8 <HAL_I2C_Mem_Read+0x224>)
 80015fc:	68f8      	ldr	r0, [r7, #12]
 80015fe:	f000 fb91 	bl	8001d24 <I2C_WaitOnFlagUntilTimeout>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001608:	2302      	movs	r3, #2
 800160a:	e207      	b.n	8001a1c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001612:	2b01      	cmp	r3, #1
 8001614:	d101      	bne.n	800161a <HAL_I2C_Mem_Read+0x56>
 8001616:	2302      	movs	r3, #2
 8001618:	e200      	b.n	8001a1c <HAL_I2C_Mem_Read+0x458>
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2201      	movs	r2, #1
 800161e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0301 	and.w	r3, r3, #1
 800162c:	2b01      	cmp	r3, #1
 800162e:	d007      	beq.n	8001640 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f042 0201 	orr.w	r2, r2, #1
 800163e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800164e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2222      	movs	r2, #34	@ 0x22
 8001654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2240      	movs	r2, #64	@ 0x40
 800165c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2200      	movs	r2, #0
 8001664:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800166a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001670:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001676:	b29a      	uxth	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4a5b      	ldr	r2, [pc, #364]	@ (80017ec <HAL_I2C_Mem_Read+0x228>)
 8001680:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001682:	88f8      	ldrh	r0, [r7, #6]
 8001684:	893a      	ldrh	r2, [r7, #8]
 8001686:	8979      	ldrh	r1, [r7, #10]
 8001688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168a:	9301      	str	r3, [sp, #4]
 800168c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	4603      	mov	r3, r0
 8001692:	68f8      	ldr	r0, [r7, #12]
 8001694:	f000 fa5e 	bl	8001b54 <I2C_RequestMemoryRead>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e1bc      	b.n	8001a1c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d113      	bne.n	80016d2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016aa:	2300      	movs	r3, #0
 80016ac:	623b      	str	r3, [r7, #32]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	695b      	ldr	r3, [r3, #20]
 80016b4:	623b      	str	r3, [r7, #32]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	623b      	str	r3, [r7, #32]
 80016be:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	e190      	b.n	80019f4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d11b      	bne.n	8001712 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80016e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016ea:	2300      	movs	r3, #0
 80016ec:	61fb      	str	r3, [r7, #28]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	695b      	ldr	r3, [r3, #20]
 80016f4:	61fb      	str	r3, [r7, #28]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	61fb      	str	r3, [r7, #28]
 80016fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	e170      	b.n	80019f4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001716:	2b02      	cmp	r3, #2
 8001718:	d11b      	bne.n	8001752 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001728:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001738:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800173a:	2300      	movs	r3, #0
 800173c:	61bb      	str	r3, [r7, #24]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	695b      	ldr	r3, [r3, #20]
 8001744:	61bb      	str	r3, [r7, #24]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	61bb      	str	r3, [r7, #24]
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	e150      	b.n	80019f4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	695b      	ldr	r3, [r3, #20]
 800175c:	617b      	str	r3, [r7, #20]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	617b      	str	r3, [r7, #20]
 8001766:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001768:	e144      	b.n	80019f4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800176e:	2b03      	cmp	r3, #3
 8001770:	f200 80f1 	bhi.w	8001956 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001778:	2b01      	cmp	r3, #1
 800177a:	d123      	bne.n	80017c4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800177c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800177e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001780:	68f8      	ldr	r0, [r7, #12]
 8001782:	f000 fc79 	bl	8002078 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e145      	b.n	8001a1c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	691a      	ldr	r2, [r3, #16]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800179a:	b2d2      	uxtb	r2, r2
 800179c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a2:	1c5a      	adds	r2, r3, #1
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017ac:	3b01      	subs	r3, #1
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	3b01      	subs	r3, #1
 80017bc:	b29a      	uxth	r2, r3
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80017c2:	e117      	b.n	80019f4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d14e      	bne.n	800186a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80017cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ce:	9300      	str	r3, [sp, #0]
 80017d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017d2:	2200      	movs	r2, #0
 80017d4:	4906      	ldr	r1, [pc, #24]	@ (80017f0 <HAL_I2C_Mem_Read+0x22c>)
 80017d6:	68f8      	ldr	r0, [r7, #12]
 80017d8:	f000 faa4 	bl	8001d24 <I2C_WaitOnFlagUntilTimeout>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d008      	beq.n	80017f4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e11a      	b.n	8001a1c <HAL_I2C_Mem_Read+0x458>
 80017e6:	bf00      	nop
 80017e8:	00100002 	.word	0x00100002
 80017ec:	ffff0000 	.word	0xffff0000
 80017f0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001802:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	691a      	ldr	r2, [r3, #16]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001816:	1c5a      	adds	r2, r3, #1
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001820:	3b01      	subs	r3, #1
 8001822:	b29a      	uxth	r2, r3
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800182c:	b29b      	uxth	r3, r3
 800182e:	3b01      	subs	r3, #1
 8001830:	b29a      	uxth	r2, r3
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	691a      	ldr	r2, [r3, #16]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001840:	b2d2      	uxtb	r2, r2
 8001842:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001848:	1c5a      	adds	r2, r3, #1
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001852:	3b01      	subs	r3, #1
 8001854:	b29a      	uxth	r2, r3
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800185e:	b29b      	uxth	r3, r3
 8001860:	3b01      	subs	r3, #1
 8001862:	b29a      	uxth	r2, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001868:	e0c4      	b.n	80019f4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800186a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001870:	2200      	movs	r2, #0
 8001872:	496c      	ldr	r1, [pc, #432]	@ (8001a24 <HAL_I2C_Mem_Read+0x460>)
 8001874:	68f8      	ldr	r0, [r7, #12]
 8001876:	f000 fa55 	bl	8001d24 <I2C_WaitOnFlagUntilTimeout>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e0cb      	b.n	8001a1c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001892:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	691a      	ldr	r2, [r3, #16]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800189e:	b2d2      	uxtb	r2, r2
 80018a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a6:	1c5a      	adds	r2, r3, #1
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018b0:	3b01      	subs	r3, #1
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018bc:	b29b      	uxth	r3, r3
 80018be:	3b01      	subs	r3, #1
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80018c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018cc:	2200      	movs	r2, #0
 80018ce:	4955      	ldr	r1, [pc, #340]	@ (8001a24 <HAL_I2C_Mem_Read+0x460>)
 80018d0:	68f8      	ldr	r0, [r7, #12]
 80018d2:	f000 fa27 	bl	8001d24 <I2C_WaitOnFlagUntilTimeout>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e09d      	b.n	8001a1c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	691a      	ldr	r2, [r3, #16]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001902:	1c5a      	adds	r2, r3, #1
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800190c:	3b01      	subs	r3, #1
 800190e:	b29a      	uxth	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001918:	b29b      	uxth	r3, r3
 800191a:	3b01      	subs	r3, #1
 800191c:	b29a      	uxth	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	691a      	ldr	r2, [r3, #16]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800192c:	b2d2      	uxtb	r2, r2
 800192e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001934:	1c5a      	adds	r2, r3, #1
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800193e:	3b01      	subs	r3, #1
 8001940:	b29a      	uxth	r2, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800194a:	b29b      	uxth	r3, r3
 800194c:	3b01      	subs	r3, #1
 800194e:	b29a      	uxth	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001954:	e04e      	b.n	80019f4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001956:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001958:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800195a:	68f8      	ldr	r0, [r7, #12]
 800195c:	f000 fb8c 	bl	8002078 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e058      	b.n	8001a1c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	691a      	ldr	r2, [r3, #16]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001974:	b2d2      	uxtb	r2, r2
 8001976:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800197c:	1c5a      	adds	r2, r3, #1
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001986:	3b01      	subs	r3, #1
 8001988:	b29a      	uxth	r2, r3
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001992:	b29b      	uxth	r3, r3
 8001994:	3b01      	subs	r3, #1
 8001996:	b29a      	uxth	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	f003 0304 	and.w	r3, r3, #4
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	d124      	bne.n	80019f4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	d107      	bne.n	80019c2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80019c0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	691a      	ldr	r2, [r3, #16]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019cc:	b2d2      	uxtb	r2, r2
 80019ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d4:	1c5a      	adds	r2, r3, #1
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019de:	3b01      	subs	r3, #1
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	3b01      	subs	r3, #1
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f47f aeb6 	bne.w	800176a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2220      	movs	r2, #32
 8001a02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001a16:	2300      	movs	r3, #0
 8001a18:	e000      	b.n	8001a1c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001a1a:	2302      	movs	r3, #2
  }
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3728      	adds	r7, #40	@ 0x28
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	00010004 	.word	0x00010004

08001a28 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b088      	sub	sp, #32
 8001a2c:	af02      	add	r7, sp, #8
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	4608      	mov	r0, r1
 8001a32:	4611      	mov	r1, r2
 8001a34:	461a      	mov	r2, r3
 8001a36:	4603      	mov	r3, r0
 8001a38:	817b      	strh	r3, [r7, #10]
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	813b      	strh	r3, [r7, #8]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	6a3b      	ldr	r3, [r7, #32]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001a5e:	68f8      	ldr	r0, [r7, #12]
 8001a60:	f000 f960 	bl	8001d24 <I2C_WaitOnFlagUntilTimeout>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d00d      	beq.n	8001a86 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a78:	d103      	bne.n	8001a82 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a80:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e05f      	b.n	8001b46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a86:	897b      	ldrh	r3, [r7, #10]
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001a94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a98:	6a3a      	ldr	r2, [r7, #32]
 8001a9a:	492d      	ldr	r1, [pc, #180]	@ (8001b50 <I2C_RequestMemoryWrite+0x128>)
 8001a9c:	68f8      	ldr	r0, [r7, #12]
 8001a9e:	f000 f9bb 	bl	8001e18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e04c      	b.n	8001b46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	617b      	str	r3, [r7, #20]
 8001ac0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ac2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ac4:	6a39      	ldr	r1, [r7, #32]
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f000 fa46 	bl	8001f58 <I2C_WaitOnTXEFlagUntilTimeout>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d00d      	beq.n	8001aee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	d107      	bne.n	8001aea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ae8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e02b      	b.n	8001b46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001aee:	88fb      	ldrh	r3, [r7, #6]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d105      	bne.n	8001b00 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001af4:	893b      	ldrh	r3, [r7, #8]
 8001af6:	b2da      	uxtb	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	611a      	str	r2, [r3, #16]
 8001afe:	e021      	b.n	8001b44 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001b00:	893b      	ldrh	r3, [r7, #8]
 8001b02:	0a1b      	lsrs	r3, r3, #8
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	b2da      	uxtb	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b10:	6a39      	ldr	r1, [r7, #32]
 8001b12:	68f8      	ldr	r0, [r7, #12]
 8001b14:	f000 fa20 	bl	8001f58 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d00d      	beq.n	8001b3a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	d107      	bne.n	8001b36 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e005      	b.n	8001b46 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001b3a:	893b      	ldrh	r3, [r7, #8]
 8001b3c:	b2da      	uxtb	r2, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	00010002 	.word	0x00010002

08001b54 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b088      	sub	sp, #32
 8001b58:	af02      	add	r7, sp, #8
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	4608      	mov	r0, r1
 8001b5e:	4611      	mov	r1, r2
 8001b60:	461a      	mov	r2, r3
 8001b62:	4603      	mov	r3, r0
 8001b64:	817b      	strh	r3, [r7, #10]
 8001b66:	460b      	mov	r3, r1
 8001b68:	813b      	strh	r3, [r7, #8]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001b7c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	6a3b      	ldr	r3, [r7, #32]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	f000 f8c2 	bl	8001d24 <I2C_WaitOnFlagUntilTimeout>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d00d      	beq.n	8001bc2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001bb4:	d103      	bne.n	8001bbe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bbc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e0aa      	b.n	8001d18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001bc2:	897b      	ldrh	r3, [r7, #10]
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001bd0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd4:	6a3a      	ldr	r2, [r7, #32]
 8001bd6:	4952      	ldr	r1, [pc, #328]	@ (8001d20 <I2C_RequestMemoryRead+0x1cc>)
 8001bd8:	68f8      	ldr	r0, [r7, #12]
 8001bda:	f000 f91d 	bl	8001e18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e097      	b.n	8001d18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c00:	6a39      	ldr	r1, [r7, #32]
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f000 f9a8 	bl	8001f58 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00d      	beq.n	8001c2a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	d107      	bne.n	8001c26 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c24:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e076      	b.n	8001d18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c2a:	88fb      	ldrh	r3, [r7, #6]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d105      	bne.n	8001c3c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001c30:	893b      	ldrh	r3, [r7, #8]
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	611a      	str	r2, [r3, #16]
 8001c3a:	e021      	b.n	8001c80 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001c3c:	893b      	ldrh	r3, [r7, #8]
 8001c3e:	0a1b      	lsrs	r3, r3, #8
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c4c:	6a39      	ldr	r1, [r7, #32]
 8001c4e:	68f8      	ldr	r0, [r7, #12]
 8001c50:	f000 f982 	bl	8001f58 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d00d      	beq.n	8001c76 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	d107      	bne.n	8001c72 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c70:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e050      	b.n	8001d18 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001c76:	893b      	ldrh	r3, [r7, #8]
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c82:	6a39      	ldr	r1, [r7, #32]
 8001c84:	68f8      	ldr	r0, [r7, #12]
 8001c86:	f000 f967 	bl	8001f58 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d00d      	beq.n	8001cac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	d107      	bne.n	8001ca8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ca6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e035      	b.n	8001d18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001cba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	6a3b      	ldr	r3, [r7, #32]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001cc8:	68f8      	ldr	r0, [r7, #12]
 8001cca:	f000 f82b 	bl	8001d24 <I2C_WaitOnFlagUntilTimeout>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00d      	beq.n	8001cf0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ce2:	d103      	bne.n	8001cec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e013      	b.n	8001d18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001cf0:	897b      	ldrh	r3, [r7, #10]
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d02:	6a3a      	ldr	r2, [r7, #32]
 8001d04:	4906      	ldr	r1, [pc, #24]	@ (8001d20 <I2C_RequestMemoryRead+0x1cc>)
 8001d06:	68f8      	ldr	r0, [r7, #12]
 8001d08:	f000 f886 	bl	8001e18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e000      	b.n	8001d18 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	00010002 	.word	0x00010002

08001d24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	603b      	str	r3, [r7, #0]
 8001d30:	4613      	mov	r3, r2
 8001d32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d34:	e048      	b.n	8001dc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d3c:	d044      	beq.n	8001dc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d3e:	f7fe ff8d 	bl	8000c5c <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d302      	bcc.n	8001d54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d139      	bne.n	8001dc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	0c1b      	lsrs	r3, r3, #16
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d10d      	bne.n	8001d7a <I2C_WaitOnFlagUntilTimeout+0x56>
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	695b      	ldr	r3, [r3, #20]
 8001d64:	43da      	mvns	r2, r3
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	bf0c      	ite	eq
 8001d70:	2301      	moveq	r3, #1
 8001d72:	2300      	movne	r3, #0
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	461a      	mov	r2, r3
 8001d78:	e00c      	b.n	8001d94 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	43da      	mvns	r2, r3
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	4013      	ands	r3, r2
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	bf0c      	ite	eq
 8001d8c:	2301      	moveq	r3, #1
 8001d8e:	2300      	movne	r3, #0
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	461a      	mov	r2, r3
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d116      	bne.n	8001dc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2220      	movs	r2, #32
 8001da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db4:	f043 0220 	orr.w	r2, r3, #32
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e023      	b.n	8001e10 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	0c1b      	lsrs	r3, r3, #16
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d10d      	bne.n	8001dee <I2C_WaitOnFlagUntilTimeout+0xca>
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	695b      	ldr	r3, [r3, #20]
 8001dd8:	43da      	mvns	r2, r3
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	bf0c      	ite	eq
 8001de4:	2301      	moveq	r3, #1
 8001de6:	2300      	movne	r3, #0
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	461a      	mov	r2, r3
 8001dec:	e00c      	b.n	8001e08 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	43da      	mvns	r2, r3
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	bf0c      	ite	eq
 8001e00:	2301      	moveq	r3, #1
 8001e02:	2300      	movne	r3, #0
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	461a      	mov	r2, r3
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d093      	beq.n	8001d36 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3710      	adds	r7, #16
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
 8001e24:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e26:	e071      	b.n	8001f0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e36:	d123      	bne.n	8001e80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e46:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001e50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2200      	movs	r2, #0
 8001e56:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2220      	movs	r2, #32
 8001e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6c:	f043 0204 	orr.w	r2, r3, #4
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e067      	b.n	8001f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e86:	d041      	beq.n	8001f0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e88:	f7fe fee8 	bl	8000c5c <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d302      	bcc.n	8001e9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d136      	bne.n	8001f0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	0c1b      	lsrs	r3, r3, #16
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d10c      	bne.n	8001ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	43da      	mvns	r2, r3
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	bf14      	ite	ne
 8001eba:	2301      	movne	r3, #1
 8001ebc:	2300      	moveq	r3, #0
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	e00b      	b.n	8001eda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	43da      	mvns	r2, r3
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	bf14      	ite	ne
 8001ed4:	2301      	movne	r3, #1
 8001ed6:	2300      	moveq	r3, #0
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d016      	beq.n	8001f0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2220      	movs	r2, #32
 8001ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef8:	f043 0220 	orr.w	r2, r3, #32
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e021      	b.n	8001f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	0c1b      	lsrs	r3, r3, #16
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d10c      	bne.n	8001f30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	695b      	ldr	r3, [r3, #20]
 8001f1c:	43da      	mvns	r2, r3
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	4013      	ands	r3, r2
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	bf14      	ite	ne
 8001f28:	2301      	movne	r3, #1
 8001f2a:	2300      	moveq	r3, #0
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	e00b      	b.n	8001f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	43da      	mvns	r2, r3
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	bf14      	ite	ne
 8001f42:	2301      	movne	r3, #1
 8001f44:	2300      	moveq	r3, #0
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f47f af6d 	bne.w	8001e28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f64:	e034      	b.n	8001fd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f000 f8e3 	bl	8002132 <I2C_IsAcknowledgeFailed>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e034      	b.n	8001fe0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f7c:	d028      	beq.n	8001fd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f7e:	f7fe fe6d 	bl	8000c5c <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	68ba      	ldr	r2, [r7, #8]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d302      	bcc.n	8001f94 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d11d      	bne.n	8001fd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f9e:	2b80      	cmp	r3, #128	@ 0x80
 8001fa0:	d016      	beq.n	8001fd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2220      	movs	r2, #32
 8001fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fbc:	f043 0220 	orr.w	r2, r3, #32
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e007      	b.n	8001fe0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fda:	2b80      	cmp	r3, #128	@ 0x80
 8001fdc:	d1c3      	bne.n	8001f66 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3710      	adds	r7, #16
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ff4:	e034      	b.n	8002060 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f000 f89b 	bl	8002132 <I2C_IsAcknowledgeFailed>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e034      	b.n	8002070 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800200c:	d028      	beq.n	8002060 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800200e:	f7fe fe25 	bl	8000c5c <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	68ba      	ldr	r2, [r7, #8]
 800201a:	429a      	cmp	r2, r3
 800201c:	d302      	bcc.n	8002024 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d11d      	bne.n	8002060 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	f003 0304 	and.w	r3, r3, #4
 800202e:	2b04      	cmp	r3, #4
 8002030:	d016      	beq.n	8002060 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2200      	movs	r2, #0
 8002036:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2220      	movs	r2, #32
 800203c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204c:	f043 0220 	orr.w	r2, r3, #32
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e007      	b.n	8002070 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	f003 0304 	and.w	r3, r3, #4
 800206a:	2b04      	cmp	r3, #4
 800206c:	d1c3      	bne.n	8001ff6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002084:	e049      	b.n	800211a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	695b      	ldr	r3, [r3, #20]
 800208c:	f003 0310 	and.w	r3, r3, #16
 8002090:	2b10      	cmp	r3, #16
 8002092:	d119      	bne.n	80020c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f06f 0210 	mvn.w	r2, #16
 800209c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2200      	movs	r2, #0
 80020a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2220      	movs	r2, #32
 80020a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e030      	b.n	800212a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020c8:	f7fe fdc8 	bl	8000c5c <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d302      	bcc.n	80020de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d11d      	bne.n	800211a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	695b      	ldr	r3, [r3, #20]
 80020e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020e8:	2b40      	cmp	r3, #64	@ 0x40
 80020ea:	d016      	beq.n	800211a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2220      	movs	r2, #32
 80020f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002106:	f043 0220 	orr.w	r2, r3, #32
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e007      	b.n	800212a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	695b      	ldr	r3, [r3, #20]
 8002120:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002124:	2b40      	cmp	r3, #64	@ 0x40
 8002126:	d1ae      	bne.n	8002086 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	695b      	ldr	r3, [r3, #20]
 8002140:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002144:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002148:	d11b      	bne.n	8002182 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002152:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2220      	movs	r2, #32
 800215e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216e:	f043 0204 	orr.w	r2, r3, #4
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e000      	b.n	8002184 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e267      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d075      	beq.n	800229a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80021ae:	4b88      	ldr	r3, [pc, #544]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 030c 	and.w	r3, r3, #12
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	d00c      	beq.n	80021d4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021ba:	4b85      	ldr	r3, [pc, #532]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80021c2:	2b08      	cmp	r3, #8
 80021c4:	d112      	bne.n	80021ec <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021c6:	4b82      	ldr	r3, [pc, #520]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021d2:	d10b      	bne.n	80021ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d4:	4b7e      	ldr	r3, [pc, #504]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d05b      	beq.n	8002298 <HAL_RCC_OscConfig+0x108>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d157      	bne.n	8002298 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e242      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021f4:	d106      	bne.n	8002204 <HAL_RCC_OscConfig+0x74>
 80021f6:	4b76      	ldr	r3, [pc, #472]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a75      	ldr	r2, [pc, #468]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 80021fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002200:	6013      	str	r3, [r2, #0]
 8002202:	e01d      	b.n	8002240 <HAL_RCC_OscConfig+0xb0>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800220c:	d10c      	bne.n	8002228 <HAL_RCC_OscConfig+0x98>
 800220e:	4b70      	ldr	r3, [pc, #448]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a6f      	ldr	r2, [pc, #444]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 8002214:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	4b6d      	ldr	r3, [pc, #436]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a6c      	ldr	r2, [pc, #432]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 8002220:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002224:	6013      	str	r3, [r2, #0]
 8002226:	e00b      	b.n	8002240 <HAL_RCC_OscConfig+0xb0>
 8002228:	4b69      	ldr	r3, [pc, #420]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a68      	ldr	r2, [pc, #416]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 800222e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002232:	6013      	str	r3, [r2, #0]
 8002234:	4b66      	ldr	r3, [pc, #408]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a65      	ldr	r2, [pc, #404]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 800223a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800223e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d013      	beq.n	8002270 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002248:	f7fe fd08 	bl	8000c5c <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002250:	f7fe fd04 	bl	8000c5c <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b64      	cmp	r3, #100	@ 0x64
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e207      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002262:	4b5b      	ldr	r3, [pc, #364]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0f0      	beq.n	8002250 <HAL_RCC_OscConfig+0xc0>
 800226e:	e014      	b.n	800229a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002270:	f7fe fcf4 	bl	8000c5c <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002278:	f7fe fcf0 	bl	8000c5c <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b64      	cmp	r3, #100	@ 0x64
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e1f3      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800228a:	4b51      	ldr	r3, [pc, #324]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1f0      	bne.n	8002278 <HAL_RCC_OscConfig+0xe8>
 8002296:	e000      	b.n	800229a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002298:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d063      	beq.n	800236e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80022a6:	4b4a      	ldr	r3, [pc, #296]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 030c 	and.w	r3, r3, #12
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00b      	beq.n	80022ca <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022b2:	4b47      	ldr	r3, [pc, #284]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80022ba:	2b08      	cmp	r3, #8
 80022bc:	d11c      	bne.n	80022f8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022be:	4b44      	ldr	r3, [pc, #272]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d116      	bne.n	80022f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ca:	4b41      	ldr	r3, [pc, #260]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d005      	beq.n	80022e2 <HAL_RCC_OscConfig+0x152>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d001      	beq.n	80022e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e1c7      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e2:	4b3b      	ldr	r3, [pc, #236]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	4937      	ldr	r1, [pc, #220]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022f6:	e03a      	b.n	800236e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d020      	beq.n	8002342 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002300:	4b34      	ldr	r3, [pc, #208]	@ (80023d4 <HAL_RCC_OscConfig+0x244>)
 8002302:	2201      	movs	r2, #1
 8002304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002306:	f7fe fca9 	bl	8000c5c <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800230c:	e008      	b.n	8002320 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800230e:	f7fe fca5 	bl	8000c5c <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e1a8      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002320:	4b2b      	ldr	r3, [pc, #172]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d0f0      	beq.n	800230e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800232c:	4b28      	ldr	r3, [pc, #160]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	4925      	ldr	r1, [pc, #148]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 800233c:	4313      	orrs	r3, r2
 800233e:	600b      	str	r3, [r1, #0]
 8002340:	e015      	b.n	800236e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002342:	4b24      	ldr	r3, [pc, #144]	@ (80023d4 <HAL_RCC_OscConfig+0x244>)
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002348:	f7fe fc88 	bl	8000c5c <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002350:	f7fe fc84 	bl	8000c5c <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e187      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002362:	4b1b      	ldr	r3, [pc, #108]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f0      	bne.n	8002350 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0308 	and.w	r3, r3, #8
 8002376:	2b00      	cmp	r3, #0
 8002378:	d036      	beq.n	80023e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d016      	beq.n	80023b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002382:	4b15      	ldr	r3, [pc, #84]	@ (80023d8 <HAL_RCC_OscConfig+0x248>)
 8002384:	2201      	movs	r2, #1
 8002386:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002388:	f7fe fc68 	bl	8000c5c <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002390:	f7fe fc64 	bl	8000c5c <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e167      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023a2:	4b0b      	ldr	r3, [pc, #44]	@ (80023d0 <HAL_RCC_OscConfig+0x240>)
 80023a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d0f0      	beq.n	8002390 <HAL_RCC_OscConfig+0x200>
 80023ae:	e01b      	b.n	80023e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023b0:	4b09      	ldr	r3, [pc, #36]	@ (80023d8 <HAL_RCC_OscConfig+0x248>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b6:	f7fe fc51 	bl	8000c5c <HAL_GetTick>
 80023ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023bc:	e00e      	b.n	80023dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023be:	f7fe fc4d 	bl	8000c5c <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d907      	bls.n	80023dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e150      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
 80023d0:	40023800 	.word	0x40023800
 80023d4:	42470000 	.word	0x42470000
 80023d8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023dc:	4b88      	ldr	r3, [pc, #544]	@ (8002600 <HAL_RCC_OscConfig+0x470>)
 80023de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1ea      	bne.n	80023be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f000 8097 	beq.w	8002524 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023f6:	2300      	movs	r3, #0
 80023f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023fa:	4b81      	ldr	r3, [pc, #516]	@ (8002600 <HAL_RCC_OscConfig+0x470>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10f      	bne.n	8002426 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	60bb      	str	r3, [r7, #8]
 800240a:	4b7d      	ldr	r3, [pc, #500]	@ (8002600 <HAL_RCC_OscConfig+0x470>)
 800240c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240e:	4a7c      	ldr	r2, [pc, #496]	@ (8002600 <HAL_RCC_OscConfig+0x470>)
 8002410:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002414:	6413      	str	r3, [r2, #64]	@ 0x40
 8002416:	4b7a      	ldr	r3, [pc, #488]	@ (8002600 <HAL_RCC_OscConfig+0x470>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800241e:	60bb      	str	r3, [r7, #8]
 8002420:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002422:	2301      	movs	r3, #1
 8002424:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002426:	4b77      	ldr	r3, [pc, #476]	@ (8002604 <HAL_RCC_OscConfig+0x474>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800242e:	2b00      	cmp	r3, #0
 8002430:	d118      	bne.n	8002464 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002432:	4b74      	ldr	r3, [pc, #464]	@ (8002604 <HAL_RCC_OscConfig+0x474>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a73      	ldr	r2, [pc, #460]	@ (8002604 <HAL_RCC_OscConfig+0x474>)
 8002438:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800243c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800243e:	f7fe fc0d 	bl	8000c5c <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002444:	e008      	b.n	8002458 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002446:	f7fe fc09 	bl	8000c5c <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e10c      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002458:	4b6a      	ldr	r3, [pc, #424]	@ (8002604 <HAL_RCC_OscConfig+0x474>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002460:	2b00      	cmp	r3, #0
 8002462:	d0f0      	beq.n	8002446 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d106      	bne.n	800247a <HAL_RCC_OscConfig+0x2ea>
 800246c:	4b64      	ldr	r3, [pc, #400]	@ (8002600 <HAL_RCC_OscConfig+0x470>)
 800246e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002470:	4a63      	ldr	r2, [pc, #396]	@ (8002600 <HAL_RCC_OscConfig+0x470>)
 8002472:	f043 0301 	orr.w	r3, r3, #1
 8002476:	6713      	str	r3, [r2, #112]	@ 0x70
 8002478:	e01c      	b.n	80024b4 <HAL_RCC_OscConfig+0x324>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	2b05      	cmp	r3, #5
 8002480:	d10c      	bne.n	800249c <HAL_RCC_OscConfig+0x30c>
 8002482:	4b5f      	ldr	r3, [pc, #380]	@ (8002600 <HAL_RCC_OscConfig+0x470>)
 8002484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002486:	4a5e      	ldr	r2, [pc, #376]	@ (8002600 <HAL_RCC_OscConfig+0x470>)
 8002488:	f043 0304 	orr.w	r3, r3, #4
 800248c:	6713      	str	r3, [r2, #112]	@ 0x70
 800248e:	4b5c      	ldr	r3, [pc, #368]	@ (8002600 <HAL_RCC_OscConfig+0x470>)
 8002490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002492:	4a5b      	ldr	r2, [pc, #364]	@ (8002600 <HAL_RCC_OscConfig+0x470>)
 8002494:	f043 0301 	orr.w	r3, r3, #1
 8002498:	6713      	str	r3, [r2, #112]	@ 0x70
 800249a:	e00b      	b.n	80024b4 <HAL_RCC_OscConfig+0x324>
 800249c:	4b58      	ldr	r3, [pc, #352]	@ (8002600 <HAL_RCC_OscConfig+0x470>)
 800249e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024a0:	4a57      	ldr	r2, [pc, #348]	@ (8002600 <HAL_RCC_OscConfig+0x470>)
 80024a2:	f023 0301 	bic.w	r3, r3, #1
 80024a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80024a8:	4b55      	ldr	r3, [pc, #340]	@ (8002600 <HAL_RCC_OscConfig+0x470>)
 80024aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ac:	4a54      	ldr	r2, [pc, #336]	@ (8002600 <HAL_RCC_OscConfig+0x470>)
 80024ae:	f023 0304 	bic.w	r3, r3, #4
 80024b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d015      	beq.n	80024e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024bc:	f7fe fbce 	bl	8000c5c <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c2:	e00a      	b.n	80024da <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c4:	f7fe fbca 	bl	8000c5c <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e0cb      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024da:	4b49      	ldr	r3, [pc, #292]	@ (8002600 <HAL_RCC_OscConfig+0x470>)
 80024dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0ee      	beq.n	80024c4 <HAL_RCC_OscConfig+0x334>
 80024e6:	e014      	b.n	8002512 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e8:	f7fe fbb8 	bl	8000c5c <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ee:	e00a      	b.n	8002506 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024f0:	f7fe fbb4 	bl	8000c5c <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024fe:	4293      	cmp	r3, r2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e0b5      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002506:	4b3e      	ldr	r3, [pc, #248]	@ (8002600 <HAL_RCC_OscConfig+0x470>)
 8002508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1ee      	bne.n	80024f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002512:	7dfb      	ldrb	r3, [r7, #23]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d105      	bne.n	8002524 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002518:	4b39      	ldr	r3, [pc, #228]	@ (8002600 <HAL_RCC_OscConfig+0x470>)
 800251a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251c:	4a38      	ldr	r2, [pc, #224]	@ (8002600 <HAL_RCC_OscConfig+0x470>)
 800251e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002522:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	2b00      	cmp	r3, #0
 800252a:	f000 80a1 	beq.w	8002670 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800252e:	4b34      	ldr	r3, [pc, #208]	@ (8002600 <HAL_RCC_OscConfig+0x470>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 030c 	and.w	r3, r3, #12
 8002536:	2b08      	cmp	r3, #8
 8002538:	d05c      	beq.n	80025f4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	2b02      	cmp	r3, #2
 8002540:	d141      	bne.n	80025c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002542:	4b31      	ldr	r3, [pc, #196]	@ (8002608 <HAL_RCC_OscConfig+0x478>)
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002548:	f7fe fb88 	bl	8000c5c <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002550:	f7fe fb84 	bl	8000c5c <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e087      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002562:	4b27      	ldr	r3, [pc, #156]	@ (8002600 <HAL_RCC_OscConfig+0x470>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f0      	bne.n	8002550 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69da      	ldr	r2, [r3, #28]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	431a      	orrs	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257c:	019b      	lsls	r3, r3, #6
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002584:	085b      	lsrs	r3, r3, #1
 8002586:	3b01      	subs	r3, #1
 8002588:	041b      	lsls	r3, r3, #16
 800258a:	431a      	orrs	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002590:	061b      	lsls	r3, r3, #24
 8002592:	491b      	ldr	r1, [pc, #108]	@ (8002600 <HAL_RCC_OscConfig+0x470>)
 8002594:	4313      	orrs	r3, r2
 8002596:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002598:	4b1b      	ldr	r3, [pc, #108]	@ (8002608 <HAL_RCC_OscConfig+0x478>)
 800259a:	2201      	movs	r2, #1
 800259c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259e:	f7fe fb5d 	bl	8000c5c <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a6:	f7fe fb59 	bl	8000c5c <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e05c      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025b8:	4b11      	ldr	r3, [pc, #68]	@ (8002600 <HAL_RCC_OscConfig+0x470>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0f0      	beq.n	80025a6 <HAL_RCC_OscConfig+0x416>
 80025c4:	e054      	b.n	8002670 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c6:	4b10      	ldr	r3, [pc, #64]	@ (8002608 <HAL_RCC_OscConfig+0x478>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025cc:	f7fe fb46 	bl	8000c5c <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d4:	f7fe fb42 	bl	8000c5c <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e045      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025e6:	4b06      	ldr	r3, [pc, #24]	@ (8002600 <HAL_RCC_OscConfig+0x470>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1f0      	bne.n	80025d4 <HAL_RCC_OscConfig+0x444>
 80025f2:	e03d      	b.n	8002670 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d107      	bne.n	800260c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e038      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
 8002600:	40023800 	.word	0x40023800
 8002604:	40007000 	.word	0x40007000
 8002608:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800260c:	4b1b      	ldr	r3, [pc, #108]	@ (800267c <HAL_RCC_OscConfig+0x4ec>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d028      	beq.n	800266c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002624:	429a      	cmp	r2, r3
 8002626:	d121      	bne.n	800266c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002632:	429a      	cmp	r2, r3
 8002634:	d11a      	bne.n	800266c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800263c:	4013      	ands	r3, r2
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002642:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002644:	4293      	cmp	r3, r2
 8002646:	d111      	bne.n	800266c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002652:	085b      	lsrs	r3, r3, #1
 8002654:	3b01      	subs	r3, #1
 8002656:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002658:	429a      	cmp	r2, r3
 800265a:	d107      	bne.n	800266c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002666:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002668:	429a      	cmp	r2, r3
 800266a:	d001      	beq.n	8002670 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e000      	b.n	8002672 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3718      	adds	r7, #24
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40023800 	.word	0x40023800

08002680 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e0cc      	b.n	800282e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002694:	4b68      	ldr	r3, [pc, #416]	@ (8002838 <HAL_RCC_ClockConfig+0x1b8>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d90c      	bls.n	80026bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a2:	4b65      	ldr	r3, [pc, #404]	@ (8002838 <HAL_RCC_ClockConfig+0x1b8>)
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026aa:	4b63      	ldr	r3, [pc, #396]	@ (8002838 <HAL_RCC_ClockConfig+0x1b8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d001      	beq.n	80026bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e0b8      	b.n	800282e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d020      	beq.n	800270a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d005      	beq.n	80026e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026d4:	4b59      	ldr	r3, [pc, #356]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	4a58      	ldr	r2, [pc, #352]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 80026da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80026de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0308 	and.w	r3, r3, #8
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d005      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026ec:	4b53      	ldr	r3, [pc, #332]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	4a52      	ldr	r2, [pc, #328]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 80026f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80026f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026f8:	4b50      	ldr	r3, [pc, #320]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	494d      	ldr	r1, [pc, #308]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 8002706:	4313      	orrs	r3, r2
 8002708:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	d044      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d107      	bne.n	800272e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271e:	4b47      	ldr	r3, [pc, #284]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d119      	bne.n	800275e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e07f      	b.n	800282e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b02      	cmp	r3, #2
 8002734:	d003      	beq.n	800273e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800273a:	2b03      	cmp	r3, #3
 800273c:	d107      	bne.n	800274e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800273e:	4b3f      	ldr	r3, [pc, #252]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d109      	bne.n	800275e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e06f      	b.n	800282e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800274e:	4b3b      	ldr	r3, [pc, #236]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e067      	b.n	800282e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800275e:	4b37      	ldr	r3, [pc, #220]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f023 0203 	bic.w	r2, r3, #3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	4934      	ldr	r1, [pc, #208]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 800276c:	4313      	orrs	r3, r2
 800276e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002770:	f7fe fa74 	bl	8000c5c <HAL_GetTick>
 8002774:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002776:	e00a      	b.n	800278e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002778:	f7fe fa70 	bl	8000c5c <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002786:	4293      	cmp	r3, r2
 8002788:	d901      	bls.n	800278e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e04f      	b.n	800282e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800278e:	4b2b      	ldr	r3, [pc, #172]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 020c 	and.w	r2, r3, #12
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	429a      	cmp	r2, r3
 800279e:	d1eb      	bne.n	8002778 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027a0:	4b25      	ldr	r3, [pc, #148]	@ (8002838 <HAL_RCC_ClockConfig+0x1b8>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d20c      	bcs.n	80027c8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ae:	4b22      	ldr	r3, [pc, #136]	@ (8002838 <HAL_RCC_ClockConfig+0x1b8>)
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b6:	4b20      	ldr	r3, [pc, #128]	@ (8002838 <HAL_RCC_ClockConfig+0x1b8>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d001      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e032      	b.n	800282e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0304 	and.w	r3, r3, #4
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d008      	beq.n	80027e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027d4:	4b19      	ldr	r3, [pc, #100]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	4916      	ldr	r1, [pc, #88]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d009      	beq.n	8002806 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027f2:	4b12      	ldr	r3, [pc, #72]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	490e      	ldr	r1, [pc, #56]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 8002802:	4313      	orrs	r3, r2
 8002804:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002806:	f000 f821 	bl	800284c <HAL_RCC_GetSysClockFreq>
 800280a:	4602      	mov	r2, r0
 800280c:	4b0b      	ldr	r3, [pc, #44]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	091b      	lsrs	r3, r3, #4
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	490a      	ldr	r1, [pc, #40]	@ (8002840 <HAL_RCC_ClockConfig+0x1c0>)
 8002818:	5ccb      	ldrb	r3, [r1, r3]
 800281a:	fa22 f303 	lsr.w	r3, r2, r3
 800281e:	4a09      	ldr	r2, [pc, #36]	@ (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 8002820:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002822:	4b09      	ldr	r3, [pc, #36]	@ (8002848 <HAL_RCC_ClockConfig+0x1c8>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f7fe f9d4 	bl	8000bd4 <HAL_InitTick>

  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40023c00 	.word	0x40023c00
 800283c:	40023800 	.word	0x40023800
 8002840:	08003c04 	.word	0x08003c04
 8002844:	20000000 	.word	0x20000000
 8002848:	20000004 	.word	0x20000004

0800284c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800284c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002850:	b090      	sub	sp, #64	@ 0x40
 8002852:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002854:	2300      	movs	r3, #0
 8002856:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002858:	2300      	movs	r3, #0
 800285a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800285c:	2300      	movs	r3, #0
 800285e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002860:	2300      	movs	r3, #0
 8002862:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002864:	4b59      	ldr	r3, [pc, #356]	@ (80029cc <HAL_RCC_GetSysClockFreq+0x180>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 030c 	and.w	r3, r3, #12
 800286c:	2b08      	cmp	r3, #8
 800286e:	d00d      	beq.n	800288c <HAL_RCC_GetSysClockFreq+0x40>
 8002870:	2b08      	cmp	r3, #8
 8002872:	f200 80a1 	bhi.w	80029b8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002876:	2b00      	cmp	r3, #0
 8002878:	d002      	beq.n	8002880 <HAL_RCC_GetSysClockFreq+0x34>
 800287a:	2b04      	cmp	r3, #4
 800287c:	d003      	beq.n	8002886 <HAL_RCC_GetSysClockFreq+0x3a>
 800287e:	e09b      	b.n	80029b8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002880:	4b53      	ldr	r3, [pc, #332]	@ (80029d0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002882:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002884:	e09b      	b.n	80029be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002886:	4b53      	ldr	r3, [pc, #332]	@ (80029d4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002888:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800288a:	e098      	b.n	80029be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800288c:	4b4f      	ldr	r3, [pc, #316]	@ (80029cc <HAL_RCC_GetSysClockFreq+0x180>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002894:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002896:	4b4d      	ldr	r3, [pc, #308]	@ (80029cc <HAL_RCC_GetSysClockFreq+0x180>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d028      	beq.n	80028f4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028a2:	4b4a      	ldr	r3, [pc, #296]	@ (80029cc <HAL_RCC_GetSysClockFreq+0x180>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	099b      	lsrs	r3, r3, #6
 80028a8:	2200      	movs	r2, #0
 80028aa:	623b      	str	r3, [r7, #32]
 80028ac:	627a      	str	r2, [r7, #36]	@ 0x24
 80028ae:	6a3b      	ldr	r3, [r7, #32]
 80028b0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80028b4:	2100      	movs	r1, #0
 80028b6:	4b47      	ldr	r3, [pc, #284]	@ (80029d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80028b8:	fb03 f201 	mul.w	r2, r3, r1
 80028bc:	2300      	movs	r3, #0
 80028be:	fb00 f303 	mul.w	r3, r0, r3
 80028c2:	4413      	add	r3, r2
 80028c4:	4a43      	ldr	r2, [pc, #268]	@ (80029d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80028c6:	fba0 1202 	umull	r1, r2, r0, r2
 80028ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80028cc:	460a      	mov	r2, r1
 80028ce:	62ba      	str	r2, [r7, #40]	@ 0x28
 80028d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028d2:	4413      	add	r3, r2
 80028d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028d8:	2200      	movs	r2, #0
 80028da:	61bb      	str	r3, [r7, #24]
 80028dc:	61fa      	str	r2, [r7, #28]
 80028de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80028e6:	f7fd fc77 	bl	80001d8 <__aeabi_uldivmod>
 80028ea:	4602      	mov	r2, r0
 80028ec:	460b      	mov	r3, r1
 80028ee:	4613      	mov	r3, r2
 80028f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028f2:	e053      	b.n	800299c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028f4:	4b35      	ldr	r3, [pc, #212]	@ (80029cc <HAL_RCC_GetSysClockFreq+0x180>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	099b      	lsrs	r3, r3, #6
 80028fa:	2200      	movs	r2, #0
 80028fc:	613b      	str	r3, [r7, #16]
 80028fe:	617a      	str	r2, [r7, #20]
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002906:	f04f 0b00 	mov.w	fp, #0
 800290a:	4652      	mov	r2, sl
 800290c:	465b      	mov	r3, fp
 800290e:	f04f 0000 	mov.w	r0, #0
 8002912:	f04f 0100 	mov.w	r1, #0
 8002916:	0159      	lsls	r1, r3, #5
 8002918:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800291c:	0150      	lsls	r0, r2, #5
 800291e:	4602      	mov	r2, r0
 8002920:	460b      	mov	r3, r1
 8002922:	ebb2 080a 	subs.w	r8, r2, sl
 8002926:	eb63 090b 	sbc.w	r9, r3, fp
 800292a:	f04f 0200 	mov.w	r2, #0
 800292e:	f04f 0300 	mov.w	r3, #0
 8002932:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002936:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800293a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800293e:	ebb2 0408 	subs.w	r4, r2, r8
 8002942:	eb63 0509 	sbc.w	r5, r3, r9
 8002946:	f04f 0200 	mov.w	r2, #0
 800294a:	f04f 0300 	mov.w	r3, #0
 800294e:	00eb      	lsls	r3, r5, #3
 8002950:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002954:	00e2      	lsls	r2, r4, #3
 8002956:	4614      	mov	r4, r2
 8002958:	461d      	mov	r5, r3
 800295a:	eb14 030a 	adds.w	r3, r4, sl
 800295e:	603b      	str	r3, [r7, #0]
 8002960:	eb45 030b 	adc.w	r3, r5, fp
 8002964:	607b      	str	r3, [r7, #4]
 8002966:	f04f 0200 	mov.w	r2, #0
 800296a:	f04f 0300 	mov.w	r3, #0
 800296e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002972:	4629      	mov	r1, r5
 8002974:	028b      	lsls	r3, r1, #10
 8002976:	4621      	mov	r1, r4
 8002978:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800297c:	4621      	mov	r1, r4
 800297e:	028a      	lsls	r2, r1, #10
 8002980:	4610      	mov	r0, r2
 8002982:	4619      	mov	r1, r3
 8002984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002986:	2200      	movs	r2, #0
 8002988:	60bb      	str	r3, [r7, #8]
 800298a:	60fa      	str	r2, [r7, #12]
 800298c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002990:	f7fd fc22 	bl	80001d8 <__aeabi_uldivmod>
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
 8002998:	4613      	mov	r3, r2
 800299a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800299c:	4b0b      	ldr	r3, [pc, #44]	@ (80029cc <HAL_RCC_GetSysClockFreq+0x180>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	0c1b      	lsrs	r3, r3, #16
 80029a2:	f003 0303 	and.w	r3, r3, #3
 80029a6:	3301      	adds	r3, #1
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80029ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80029ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80029b6:	e002      	b.n	80029be <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029b8:	4b05      	ldr	r3, [pc, #20]	@ (80029d0 <HAL_RCC_GetSysClockFreq+0x184>)
 80029ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80029bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3740      	adds	r7, #64	@ 0x40
 80029c4:	46bd      	mov	sp, r7
 80029c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029ca:	bf00      	nop
 80029cc:	40023800 	.word	0x40023800
 80029d0:	00f42400 	.word	0x00f42400
 80029d4:	017d7840 	.word	0x017d7840

080029d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029dc:	4b03      	ldr	r3, [pc, #12]	@ (80029ec <HAL_RCC_GetHCLKFreq+0x14>)
 80029de:	681b      	ldr	r3, [r3, #0]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	20000000 	.word	0x20000000

080029f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029f4:	f7ff fff0 	bl	80029d8 <HAL_RCC_GetHCLKFreq>
 80029f8:	4602      	mov	r2, r0
 80029fa:	4b05      	ldr	r3, [pc, #20]	@ (8002a10 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	0a9b      	lsrs	r3, r3, #10
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	4903      	ldr	r1, [pc, #12]	@ (8002a14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a06:	5ccb      	ldrb	r3, [r1, r3]
 8002a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40023800 	.word	0x40023800
 8002a14:	08003c14 	.word	0x08003c14

08002a18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a1c:	f7ff ffdc 	bl	80029d8 <HAL_RCC_GetHCLKFreq>
 8002a20:	4602      	mov	r2, r0
 8002a22:	4b05      	ldr	r3, [pc, #20]	@ (8002a38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	0b5b      	lsrs	r3, r3, #13
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	4903      	ldr	r1, [pc, #12]	@ (8002a3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a2e:	5ccb      	ldrb	r3, [r1, r3]
 8002a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	08003c14 	.word	0x08003c14

08002a40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e042      	b.n	8002ad8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d106      	bne.n	8002a6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f7fd ff58 	bl	800091c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2224      	movs	r2, #36	@ 0x24
 8002a70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68da      	ldr	r2, [r3, #12]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 f973 	bl	8002d70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	691a      	ldr	r2, [r3, #16]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002a98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	695a      	ldr	r2, [r3, #20]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002aa8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68da      	ldr	r2, [r3, #12]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ab8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2220      	movs	r2, #32
 8002acc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b08a      	sub	sp, #40	@ 0x28
 8002ae4:	af02      	add	r7, sp, #8
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	603b      	str	r3, [r7, #0]
 8002aec:	4613      	mov	r3, r2
 8002aee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002af0:	2300      	movs	r3, #0
 8002af2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b20      	cmp	r3, #32
 8002afe:	d175      	bne.n	8002bec <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d002      	beq.n	8002b0c <HAL_UART_Transmit+0x2c>
 8002b06:	88fb      	ldrh	r3, [r7, #6]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e06e      	b.n	8002bee <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2221      	movs	r2, #33	@ 0x21
 8002b1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b1e:	f7fe f89d 	bl	8000c5c <HAL_GetTick>
 8002b22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	88fa      	ldrh	r2, [r7, #6]
 8002b28:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	88fa      	ldrh	r2, [r7, #6]
 8002b2e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b38:	d108      	bne.n	8002b4c <HAL_UART_Transmit+0x6c>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d104      	bne.n	8002b4c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002b42:	2300      	movs	r3, #0
 8002b44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	61bb      	str	r3, [r7, #24]
 8002b4a:	e003      	b.n	8002b54 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b54:	e02e      	b.n	8002bb4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	2180      	movs	r1, #128	@ 0x80
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f000 f848 	bl	8002bf6 <UART_WaitOnFlagUntilTimeout>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d005      	beq.n	8002b78 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2220      	movs	r2, #32
 8002b70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e03a      	b.n	8002bee <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10b      	bne.n	8002b96 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	881b      	ldrh	r3, [r3, #0]
 8002b82:	461a      	mov	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b8c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	3302      	adds	r3, #2
 8002b92:	61bb      	str	r3, [r7, #24]
 8002b94:	e007      	b.n	8002ba6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	781a      	ldrb	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	3b01      	subs	r3, #1
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1cb      	bne.n	8002b56 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	2140      	movs	r1, #64	@ 0x40
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f000 f814 	bl	8002bf6 <UART_WaitOnFlagUntilTimeout>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d005      	beq.n	8002be0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e006      	b.n	8002bee <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2220      	movs	r2, #32
 8002be4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002be8:	2300      	movs	r3, #0
 8002bea:	e000      	b.n	8002bee <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002bec:	2302      	movs	r3, #2
  }
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3720      	adds	r7, #32
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b086      	sub	sp, #24
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	60f8      	str	r0, [r7, #12]
 8002bfe:	60b9      	str	r1, [r7, #8]
 8002c00:	603b      	str	r3, [r7, #0]
 8002c02:	4613      	mov	r3, r2
 8002c04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c06:	e03b      	b.n	8002c80 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c0e:	d037      	beq.n	8002c80 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c10:	f7fe f824 	bl	8000c5c <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	6a3a      	ldr	r2, [r7, #32]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d302      	bcc.n	8002c26 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c20:	6a3b      	ldr	r3, [r7, #32]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e03a      	b.n	8002ca0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	f003 0304 	and.w	r3, r3, #4
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d023      	beq.n	8002c80 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	2b80      	cmp	r3, #128	@ 0x80
 8002c3c:	d020      	beq.n	8002c80 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	2b40      	cmp	r3, #64	@ 0x40
 8002c42:	d01d      	beq.n	8002c80 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b08      	cmp	r3, #8
 8002c50:	d116      	bne.n	8002c80 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002c52:	2300      	movs	r3, #0
 8002c54:	617b      	str	r3, [r7, #20]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	617b      	str	r3, [r7, #20]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	617b      	str	r3, [r7, #20]
 8002c66:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f000 f81d 	bl	8002ca8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2208      	movs	r2, #8
 8002c72:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e00f      	b.n	8002ca0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	bf0c      	ite	eq
 8002c90:	2301      	moveq	r3, #1
 8002c92:	2300      	movne	r3, #0
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	461a      	mov	r2, r3
 8002c98:	79fb      	ldrb	r3, [r7, #7]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d0b4      	beq.n	8002c08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3718      	adds	r7, #24
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b095      	sub	sp, #84	@ 0x54
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	330c      	adds	r3, #12
 8002cb6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cba:	e853 3f00 	ldrex	r3, [r3]
 8002cbe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002cc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	330c      	adds	r3, #12
 8002cce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002cd0:	643a      	str	r2, [r7, #64]	@ 0x40
 8002cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002cd6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002cd8:	e841 2300 	strex	r3, r2, [r1]
 8002cdc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1e5      	bne.n	8002cb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	3314      	adds	r3, #20
 8002cea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cec:	6a3b      	ldr	r3, [r7, #32]
 8002cee:	e853 3f00 	ldrex	r3, [r3]
 8002cf2:	61fb      	str	r3, [r7, #28]
   return(result);
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	f023 0301 	bic.w	r3, r3, #1
 8002cfa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	3314      	adds	r3, #20
 8002d02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d04:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d06:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d0c:	e841 2300 	strex	r3, r2, [r1]
 8002d10:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1e5      	bne.n	8002ce4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d119      	bne.n	8002d54 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	330c      	adds	r3, #12
 8002d26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	e853 3f00 	ldrex	r3, [r3]
 8002d2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	f023 0310 	bic.w	r3, r3, #16
 8002d36:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	330c      	adds	r3, #12
 8002d3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d40:	61ba      	str	r2, [r7, #24]
 8002d42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d44:	6979      	ldr	r1, [r7, #20]
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	e841 2300 	strex	r3, r2, [r1]
 8002d4c:	613b      	str	r3, [r7, #16]
   return(result);
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1e5      	bne.n	8002d20 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2220      	movs	r2, #32
 8002d58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002d62:	bf00      	nop
 8002d64:	3754      	adds	r7, #84	@ 0x54
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
	...

08002d70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d74:	b0c0      	sub	sp, #256	@ 0x100
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d8c:	68d9      	ldr	r1, [r3, #12]
 8002d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	ea40 0301 	orr.w	r3, r0, r1
 8002d98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	431a      	orrs	r2, r3
 8002da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	431a      	orrs	r2, r3
 8002db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002dc8:	f021 010c 	bic.w	r1, r1, #12
 8002dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002dd6:	430b      	orrs	r3, r1
 8002dd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dea:	6999      	ldr	r1, [r3, #24]
 8002dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	ea40 0301 	orr.w	r3, r0, r1
 8002df6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	4b8f      	ldr	r3, [pc, #572]	@ (800303c <UART_SetConfig+0x2cc>)
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d005      	beq.n	8002e10 <UART_SetConfig+0xa0>
 8002e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	4b8d      	ldr	r3, [pc, #564]	@ (8003040 <UART_SetConfig+0x2d0>)
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d104      	bne.n	8002e1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e10:	f7ff fe02 	bl	8002a18 <HAL_RCC_GetPCLK2Freq>
 8002e14:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002e18:	e003      	b.n	8002e22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e1a:	f7ff fde9 	bl	80029f0 <HAL_RCC_GetPCLK1Freq>
 8002e1e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e2c:	f040 810c 	bne.w	8003048 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e34:	2200      	movs	r2, #0
 8002e36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002e3a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002e3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002e42:	4622      	mov	r2, r4
 8002e44:	462b      	mov	r3, r5
 8002e46:	1891      	adds	r1, r2, r2
 8002e48:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002e4a:	415b      	adcs	r3, r3
 8002e4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002e4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002e52:	4621      	mov	r1, r4
 8002e54:	eb12 0801 	adds.w	r8, r2, r1
 8002e58:	4629      	mov	r1, r5
 8002e5a:	eb43 0901 	adc.w	r9, r3, r1
 8002e5e:	f04f 0200 	mov.w	r2, #0
 8002e62:	f04f 0300 	mov.w	r3, #0
 8002e66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e72:	4690      	mov	r8, r2
 8002e74:	4699      	mov	r9, r3
 8002e76:	4623      	mov	r3, r4
 8002e78:	eb18 0303 	adds.w	r3, r8, r3
 8002e7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002e80:	462b      	mov	r3, r5
 8002e82:	eb49 0303 	adc.w	r3, r9, r3
 8002e86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002e96:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002e9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	18db      	adds	r3, r3, r3
 8002ea2:	653b      	str	r3, [r7, #80]	@ 0x50
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	eb42 0303 	adc.w	r3, r2, r3
 8002eaa:	657b      	str	r3, [r7, #84]	@ 0x54
 8002eac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002eb0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002eb4:	f7fd f990 	bl	80001d8 <__aeabi_uldivmod>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	460b      	mov	r3, r1
 8002ebc:	4b61      	ldr	r3, [pc, #388]	@ (8003044 <UART_SetConfig+0x2d4>)
 8002ebe:	fba3 2302 	umull	r2, r3, r3, r2
 8002ec2:	095b      	lsrs	r3, r3, #5
 8002ec4:	011c      	lsls	r4, r3, #4
 8002ec6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ed0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002ed4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002ed8:	4642      	mov	r2, r8
 8002eda:	464b      	mov	r3, r9
 8002edc:	1891      	adds	r1, r2, r2
 8002ede:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002ee0:	415b      	adcs	r3, r3
 8002ee2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ee4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002ee8:	4641      	mov	r1, r8
 8002eea:	eb12 0a01 	adds.w	sl, r2, r1
 8002eee:	4649      	mov	r1, r9
 8002ef0:	eb43 0b01 	adc.w	fp, r3, r1
 8002ef4:	f04f 0200 	mov.w	r2, #0
 8002ef8:	f04f 0300 	mov.w	r3, #0
 8002efc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f08:	4692      	mov	sl, r2
 8002f0a:	469b      	mov	fp, r3
 8002f0c:	4643      	mov	r3, r8
 8002f0e:	eb1a 0303 	adds.w	r3, sl, r3
 8002f12:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f16:	464b      	mov	r3, r9
 8002f18:	eb4b 0303 	adc.w	r3, fp, r3
 8002f1c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f2c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002f30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002f34:	460b      	mov	r3, r1
 8002f36:	18db      	adds	r3, r3, r3
 8002f38:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	eb42 0303 	adc.w	r3, r2, r3
 8002f40:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002f46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002f4a:	f7fd f945 	bl	80001d8 <__aeabi_uldivmod>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	460b      	mov	r3, r1
 8002f52:	4611      	mov	r1, r2
 8002f54:	4b3b      	ldr	r3, [pc, #236]	@ (8003044 <UART_SetConfig+0x2d4>)
 8002f56:	fba3 2301 	umull	r2, r3, r3, r1
 8002f5a:	095b      	lsrs	r3, r3, #5
 8002f5c:	2264      	movs	r2, #100	@ 0x64
 8002f5e:	fb02 f303 	mul.w	r3, r2, r3
 8002f62:	1acb      	subs	r3, r1, r3
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002f6a:	4b36      	ldr	r3, [pc, #216]	@ (8003044 <UART_SetConfig+0x2d4>)
 8002f6c:	fba3 2302 	umull	r2, r3, r3, r2
 8002f70:	095b      	lsrs	r3, r3, #5
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002f78:	441c      	add	r4, r3
 8002f7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002f84:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002f88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002f8c:	4642      	mov	r2, r8
 8002f8e:	464b      	mov	r3, r9
 8002f90:	1891      	adds	r1, r2, r2
 8002f92:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002f94:	415b      	adcs	r3, r3
 8002f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002f9c:	4641      	mov	r1, r8
 8002f9e:	1851      	adds	r1, r2, r1
 8002fa0:	6339      	str	r1, [r7, #48]	@ 0x30
 8002fa2:	4649      	mov	r1, r9
 8002fa4:	414b      	adcs	r3, r1
 8002fa6:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fa8:	f04f 0200 	mov.w	r2, #0
 8002fac:	f04f 0300 	mov.w	r3, #0
 8002fb0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002fb4:	4659      	mov	r1, fp
 8002fb6:	00cb      	lsls	r3, r1, #3
 8002fb8:	4651      	mov	r1, sl
 8002fba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fbe:	4651      	mov	r1, sl
 8002fc0:	00ca      	lsls	r2, r1, #3
 8002fc2:	4610      	mov	r0, r2
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	4642      	mov	r2, r8
 8002fca:	189b      	adds	r3, r3, r2
 8002fcc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002fd0:	464b      	mov	r3, r9
 8002fd2:	460a      	mov	r2, r1
 8002fd4:	eb42 0303 	adc.w	r3, r2, r3
 8002fd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002fe8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002fec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	18db      	adds	r3, r3, r3
 8002ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	eb42 0303 	adc.w	r3, r2, r3
 8002ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ffe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003002:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003006:	f7fd f8e7 	bl	80001d8 <__aeabi_uldivmod>
 800300a:	4602      	mov	r2, r0
 800300c:	460b      	mov	r3, r1
 800300e:	4b0d      	ldr	r3, [pc, #52]	@ (8003044 <UART_SetConfig+0x2d4>)
 8003010:	fba3 1302 	umull	r1, r3, r3, r2
 8003014:	095b      	lsrs	r3, r3, #5
 8003016:	2164      	movs	r1, #100	@ 0x64
 8003018:	fb01 f303 	mul.w	r3, r1, r3
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	3332      	adds	r3, #50	@ 0x32
 8003022:	4a08      	ldr	r2, [pc, #32]	@ (8003044 <UART_SetConfig+0x2d4>)
 8003024:	fba2 2303 	umull	r2, r3, r2, r3
 8003028:	095b      	lsrs	r3, r3, #5
 800302a:	f003 0207 	and.w	r2, r3, #7
 800302e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4422      	add	r2, r4
 8003036:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003038:	e106      	b.n	8003248 <UART_SetConfig+0x4d8>
 800303a:	bf00      	nop
 800303c:	40011000 	.word	0x40011000
 8003040:	40011400 	.word	0x40011400
 8003044:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003048:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800304c:	2200      	movs	r2, #0
 800304e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003052:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003056:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800305a:	4642      	mov	r2, r8
 800305c:	464b      	mov	r3, r9
 800305e:	1891      	adds	r1, r2, r2
 8003060:	6239      	str	r1, [r7, #32]
 8003062:	415b      	adcs	r3, r3
 8003064:	627b      	str	r3, [r7, #36]	@ 0x24
 8003066:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800306a:	4641      	mov	r1, r8
 800306c:	1854      	adds	r4, r2, r1
 800306e:	4649      	mov	r1, r9
 8003070:	eb43 0501 	adc.w	r5, r3, r1
 8003074:	f04f 0200 	mov.w	r2, #0
 8003078:	f04f 0300 	mov.w	r3, #0
 800307c:	00eb      	lsls	r3, r5, #3
 800307e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003082:	00e2      	lsls	r2, r4, #3
 8003084:	4614      	mov	r4, r2
 8003086:	461d      	mov	r5, r3
 8003088:	4643      	mov	r3, r8
 800308a:	18e3      	adds	r3, r4, r3
 800308c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003090:	464b      	mov	r3, r9
 8003092:	eb45 0303 	adc.w	r3, r5, r3
 8003096:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800309a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80030a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80030aa:	f04f 0200 	mov.w	r2, #0
 80030ae:	f04f 0300 	mov.w	r3, #0
 80030b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80030b6:	4629      	mov	r1, r5
 80030b8:	008b      	lsls	r3, r1, #2
 80030ba:	4621      	mov	r1, r4
 80030bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030c0:	4621      	mov	r1, r4
 80030c2:	008a      	lsls	r2, r1, #2
 80030c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80030c8:	f7fd f886 	bl	80001d8 <__aeabi_uldivmod>
 80030cc:	4602      	mov	r2, r0
 80030ce:	460b      	mov	r3, r1
 80030d0:	4b60      	ldr	r3, [pc, #384]	@ (8003254 <UART_SetConfig+0x4e4>)
 80030d2:	fba3 2302 	umull	r2, r3, r3, r2
 80030d6:	095b      	lsrs	r3, r3, #5
 80030d8:	011c      	lsls	r4, r3, #4
 80030da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030de:	2200      	movs	r2, #0
 80030e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80030e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80030e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80030ec:	4642      	mov	r2, r8
 80030ee:	464b      	mov	r3, r9
 80030f0:	1891      	adds	r1, r2, r2
 80030f2:	61b9      	str	r1, [r7, #24]
 80030f4:	415b      	adcs	r3, r3
 80030f6:	61fb      	str	r3, [r7, #28]
 80030f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030fc:	4641      	mov	r1, r8
 80030fe:	1851      	adds	r1, r2, r1
 8003100:	6139      	str	r1, [r7, #16]
 8003102:	4649      	mov	r1, r9
 8003104:	414b      	adcs	r3, r1
 8003106:	617b      	str	r3, [r7, #20]
 8003108:	f04f 0200 	mov.w	r2, #0
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003114:	4659      	mov	r1, fp
 8003116:	00cb      	lsls	r3, r1, #3
 8003118:	4651      	mov	r1, sl
 800311a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800311e:	4651      	mov	r1, sl
 8003120:	00ca      	lsls	r2, r1, #3
 8003122:	4610      	mov	r0, r2
 8003124:	4619      	mov	r1, r3
 8003126:	4603      	mov	r3, r0
 8003128:	4642      	mov	r2, r8
 800312a:	189b      	adds	r3, r3, r2
 800312c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003130:	464b      	mov	r3, r9
 8003132:	460a      	mov	r2, r1
 8003134:	eb42 0303 	adc.w	r3, r2, r3
 8003138:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800313c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003146:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003148:	f04f 0200 	mov.w	r2, #0
 800314c:	f04f 0300 	mov.w	r3, #0
 8003150:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003154:	4649      	mov	r1, r9
 8003156:	008b      	lsls	r3, r1, #2
 8003158:	4641      	mov	r1, r8
 800315a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800315e:	4641      	mov	r1, r8
 8003160:	008a      	lsls	r2, r1, #2
 8003162:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003166:	f7fd f837 	bl	80001d8 <__aeabi_uldivmod>
 800316a:	4602      	mov	r2, r0
 800316c:	460b      	mov	r3, r1
 800316e:	4611      	mov	r1, r2
 8003170:	4b38      	ldr	r3, [pc, #224]	@ (8003254 <UART_SetConfig+0x4e4>)
 8003172:	fba3 2301 	umull	r2, r3, r3, r1
 8003176:	095b      	lsrs	r3, r3, #5
 8003178:	2264      	movs	r2, #100	@ 0x64
 800317a:	fb02 f303 	mul.w	r3, r2, r3
 800317e:	1acb      	subs	r3, r1, r3
 8003180:	011b      	lsls	r3, r3, #4
 8003182:	3332      	adds	r3, #50	@ 0x32
 8003184:	4a33      	ldr	r2, [pc, #204]	@ (8003254 <UART_SetConfig+0x4e4>)
 8003186:	fba2 2303 	umull	r2, r3, r2, r3
 800318a:	095b      	lsrs	r3, r3, #5
 800318c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003190:	441c      	add	r4, r3
 8003192:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003196:	2200      	movs	r2, #0
 8003198:	673b      	str	r3, [r7, #112]	@ 0x70
 800319a:	677a      	str	r2, [r7, #116]	@ 0x74
 800319c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80031a0:	4642      	mov	r2, r8
 80031a2:	464b      	mov	r3, r9
 80031a4:	1891      	adds	r1, r2, r2
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	415b      	adcs	r3, r3
 80031aa:	60fb      	str	r3, [r7, #12]
 80031ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031b0:	4641      	mov	r1, r8
 80031b2:	1851      	adds	r1, r2, r1
 80031b4:	6039      	str	r1, [r7, #0]
 80031b6:	4649      	mov	r1, r9
 80031b8:	414b      	adcs	r3, r1
 80031ba:	607b      	str	r3, [r7, #4]
 80031bc:	f04f 0200 	mov.w	r2, #0
 80031c0:	f04f 0300 	mov.w	r3, #0
 80031c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80031c8:	4659      	mov	r1, fp
 80031ca:	00cb      	lsls	r3, r1, #3
 80031cc:	4651      	mov	r1, sl
 80031ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031d2:	4651      	mov	r1, sl
 80031d4:	00ca      	lsls	r2, r1, #3
 80031d6:	4610      	mov	r0, r2
 80031d8:	4619      	mov	r1, r3
 80031da:	4603      	mov	r3, r0
 80031dc:	4642      	mov	r2, r8
 80031de:	189b      	adds	r3, r3, r2
 80031e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80031e2:	464b      	mov	r3, r9
 80031e4:	460a      	mov	r2, r1
 80031e6:	eb42 0303 	adc.w	r3, r2, r3
 80031ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80031ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80031f6:	667a      	str	r2, [r7, #100]	@ 0x64
 80031f8:	f04f 0200 	mov.w	r2, #0
 80031fc:	f04f 0300 	mov.w	r3, #0
 8003200:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003204:	4649      	mov	r1, r9
 8003206:	008b      	lsls	r3, r1, #2
 8003208:	4641      	mov	r1, r8
 800320a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800320e:	4641      	mov	r1, r8
 8003210:	008a      	lsls	r2, r1, #2
 8003212:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003216:	f7fc ffdf 	bl	80001d8 <__aeabi_uldivmod>
 800321a:	4602      	mov	r2, r0
 800321c:	460b      	mov	r3, r1
 800321e:	4b0d      	ldr	r3, [pc, #52]	@ (8003254 <UART_SetConfig+0x4e4>)
 8003220:	fba3 1302 	umull	r1, r3, r3, r2
 8003224:	095b      	lsrs	r3, r3, #5
 8003226:	2164      	movs	r1, #100	@ 0x64
 8003228:	fb01 f303 	mul.w	r3, r1, r3
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	011b      	lsls	r3, r3, #4
 8003230:	3332      	adds	r3, #50	@ 0x32
 8003232:	4a08      	ldr	r2, [pc, #32]	@ (8003254 <UART_SetConfig+0x4e4>)
 8003234:	fba2 2303 	umull	r2, r3, r2, r3
 8003238:	095b      	lsrs	r3, r3, #5
 800323a:	f003 020f 	and.w	r2, r3, #15
 800323e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4422      	add	r2, r4
 8003246:	609a      	str	r2, [r3, #8]
}
 8003248:	bf00      	nop
 800324a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800324e:	46bd      	mov	sp, r7
 8003250:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003254:	51eb851f 	.word	0x51eb851f

08003258 <std>:
 8003258:	2300      	movs	r3, #0
 800325a:	b510      	push	{r4, lr}
 800325c:	4604      	mov	r4, r0
 800325e:	e9c0 3300 	strd	r3, r3, [r0]
 8003262:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003266:	6083      	str	r3, [r0, #8]
 8003268:	8181      	strh	r1, [r0, #12]
 800326a:	6643      	str	r3, [r0, #100]	@ 0x64
 800326c:	81c2      	strh	r2, [r0, #14]
 800326e:	6183      	str	r3, [r0, #24]
 8003270:	4619      	mov	r1, r3
 8003272:	2208      	movs	r2, #8
 8003274:	305c      	adds	r0, #92	@ 0x5c
 8003276:	f000 f9e7 	bl	8003648 <memset>
 800327a:	4b0d      	ldr	r3, [pc, #52]	@ (80032b0 <std+0x58>)
 800327c:	6263      	str	r3, [r4, #36]	@ 0x24
 800327e:	4b0d      	ldr	r3, [pc, #52]	@ (80032b4 <std+0x5c>)
 8003280:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003282:	4b0d      	ldr	r3, [pc, #52]	@ (80032b8 <std+0x60>)
 8003284:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003286:	4b0d      	ldr	r3, [pc, #52]	@ (80032bc <std+0x64>)
 8003288:	6323      	str	r3, [r4, #48]	@ 0x30
 800328a:	4b0d      	ldr	r3, [pc, #52]	@ (80032c0 <std+0x68>)
 800328c:	6224      	str	r4, [r4, #32]
 800328e:	429c      	cmp	r4, r3
 8003290:	d006      	beq.n	80032a0 <std+0x48>
 8003292:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003296:	4294      	cmp	r4, r2
 8003298:	d002      	beq.n	80032a0 <std+0x48>
 800329a:	33d0      	adds	r3, #208	@ 0xd0
 800329c:	429c      	cmp	r4, r3
 800329e:	d105      	bne.n	80032ac <std+0x54>
 80032a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80032a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032a8:	f000 ba46 	b.w	8003738 <__retarget_lock_init_recursive>
 80032ac:	bd10      	pop	{r4, pc}
 80032ae:	bf00      	nop
 80032b0:	08003499 	.word	0x08003499
 80032b4:	080034bb 	.word	0x080034bb
 80032b8:	080034f3 	.word	0x080034f3
 80032bc:	08003517 	.word	0x08003517
 80032c0:	20000128 	.word	0x20000128

080032c4 <stdio_exit_handler>:
 80032c4:	4a02      	ldr	r2, [pc, #8]	@ (80032d0 <stdio_exit_handler+0xc>)
 80032c6:	4903      	ldr	r1, [pc, #12]	@ (80032d4 <stdio_exit_handler+0x10>)
 80032c8:	4803      	ldr	r0, [pc, #12]	@ (80032d8 <stdio_exit_handler+0x14>)
 80032ca:	f000 b869 	b.w	80033a0 <_fwalk_sglue>
 80032ce:	bf00      	nop
 80032d0:	2000000c 	.word	0x2000000c
 80032d4:	08003a39 	.word	0x08003a39
 80032d8:	2000001c 	.word	0x2000001c

080032dc <cleanup_stdio>:
 80032dc:	6841      	ldr	r1, [r0, #4]
 80032de:	4b0c      	ldr	r3, [pc, #48]	@ (8003310 <cleanup_stdio+0x34>)
 80032e0:	4299      	cmp	r1, r3
 80032e2:	b510      	push	{r4, lr}
 80032e4:	4604      	mov	r4, r0
 80032e6:	d001      	beq.n	80032ec <cleanup_stdio+0x10>
 80032e8:	f000 fba6 	bl	8003a38 <_fflush_r>
 80032ec:	68a1      	ldr	r1, [r4, #8]
 80032ee:	4b09      	ldr	r3, [pc, #36]	@ (8003314 <cleanup_stdio+0x38>)
 80032f0:	4299      	cmp	r1, r3
 80032f2:	d002      	beq.n	80032fa <cleanup_stdio+0x1e>
 80032f4:	4620      	mov	r0, r4
 80032f6:	f000 fb9f 	bl	8003a38 <_fflush_r>
 80032fa:	68e1      	ldr	r1, [r4, #12]
 80032fc:	4b06      	ldr	r3, [pc, #24]	@ (8003318 <cleanup_stdio+0x3c>)
 80032fe:	4299      	cmp	r1, r3
 8003300:	d004      	beq.n	800330c <cleanup_stdio+0x30>
 8003302:	4620      	mov	r0, r4
 8003304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003308:	f000 bb96 	b.w	8003a38 <_fflush_r>
 800330c:	bd10      	pop	{r4, pc}
 800330e:	bf00      	nop
 8003310:	20000128 	.word	0x20000128
 8003314:	20000190 	.word	0x20000190
 8003318:	200001f8 	.word	0x200001f8

0800331c <global_stdio_init.part.0>:
 800331c:	b510      	push	{r4, lr}
 800331e:	4b0b      	ldr	r3, [pc, #44]	@ (800334c <global_stdio_init.part.0+0x30>)
 8003320:	4c0b      	ldr	r4, [pc, #44]	@ (8003350 <global_stdio_init.part.0+0x34>)
 8003322:	4a0c      	ldr	r2, [pc, #48]	@ (8003354 <global_stdio_init.part.0+0x38>)
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	4620      	mov	r0, r4
 8003328:	2200      	movs	r2, #0
 800332a:	2104      	movs	r1, #4
 800332c:	f7ff ff94 	bl	8003258 <std>
 8003330:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003334:	2201      	movs	r2, #1
 8003336:	2109      	movs	r1, #9
 8003338:	f7ff ff8e 	bl	8003258 <std>
 800333c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003340:	2202      	movs	r2, #2
 8003342:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003346:	2112      	movs	r1, #18
 8003348:	f7ff bf86 	b.w	8003258 <std>
 800334c:	20000260 	.word	0x20000260
 8003350:	20000128 	.word	0x20000128
 8003354:	080032c5 	.word	0x080032c5

08003358 <__sfp_lock_acquire>:
 8003358:	4801      	ldr	r0, [pc, #4]	@ (8003360 <__sfp_lock_acquire+0x8>)
 800335a:	f000 b9ee 	b.w	800373a <__retarget_lock_acquire_recursive>
 800335e:	bf00      	nop
 8003360:	20000269 	.word	0x20000269

08003364 <__sfp_lock_release>:
 8003364:	4801      	ldr	r0, [pc, #4]	@ (800336c <__sfp_lock_release+0x8>)
 8003366:	f000 b9e9 	b.w	800373c <__retarget_lock_release_recursive>
 800336a:	bf00      	nop
 800336c:	20000269 	.word	0x20000269

08003370 <__sinit>:
 8003370:	b510      	push	{r4, lr}
 8003372:	4604      	mov	r4, r0
 8003374:	f7ff fff0 	bl	8003358 <__sfp_lock_acquire>
 8003378:	6a23      	ldr	r3, [r4, #32]
 800337a:	b11b      	cbz	r3, 8003384 <__sinit+0x14>
 800337c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003380:	f7ff bff0 	b.w	8003364 <__sfp_lock_release>
 8003384:	4b04      	ldr	r3, [pc, #16]	@ (8003398 <__sinit+0x28>)
 8003386:	6223      	str	r3, [r4, #32]
 8003388:	4b04      	ldr	r3, [pc, #16]	@ (800339c <__sinit+0x2c>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1f5      	bne.n	800337c <__sinit+0xc>
 8003390:	f7ff ffc4 	bl	800331c <global_stdio_init.part.0>
 8003394:	e7f2      	b.n	800337c <__sinit+0xc>
 8003396:	bf00      	nop
 8003398:	080032dd 	.word	0x080032dd
 800339c:	20000260 	.word	0x20000260

080033a0 <_fwalk_sglue>:
 80033a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033a4:	4607      	mov	r7, r0
 80033a6:	4688      	mov	r8, r1
 80033a8:	4614      	mov	r4, r2
 80033aa:	2600      	movs	r6, #0
 80033ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80033b0:	f1b9 0901 	subs.w	r9, r9, #1
 80033b4:	d505      	bpl.n	80033c2 <_fwalk_sglue+0x22>
 80033b6:	6824      	ldr	r4, [r4, #0]
 80033b8:	2c00      	cmp	r4, #0
 80033ba:	d1f7      	bne.n	80033ac <_fwalk_sglue+0xc>
 80033bc:	4630      	mov	r0, r6
 80033be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033c2:	89ab      	ldrh	r3, [r5, #12]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d907      	bls.n	80033d8 <_fwalk_sglue+0x38>
 80033c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80033cc:	3301      	adds	r3, #1
 80033ce:	d003      	beq.n	80033d8 <_fwalk_sglue+0x38>
 80033d0:	4629      	mov	r1, r5
 80033d2:	4638      	mov	r0, r7
 80033d4:	47c0      	blx	r8
 80033d6:	4306      	orrs	r6, r0
 80033d8:	3568      	adds	r5, #104	@ 0x68
 80033da:	e7e9      	b.n	80033b0 <_fwalk_sglue+0x10>

080033dc <_puts_r>:
 80033dc:	6a03      	ldr	r3, [r0, #32]
 80033de:	b570      	push	{r4, r5, r6, lr}
 80033e0:	6884      	ldr	r4, [r0, #8]
 80033e2:	4605      	mov	r5, r0
 80033e4:	460e      	mov	r6, r1
 80033e6:	b90b      	cbnz	r3, 80033ec <_puts_r+0x10>
 80033e8:	f7ff ffc2 	bl	8003370 <__sinit>
 80033ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80033ee:	07db      	lsls	r3, r3, #31
 80033f0:	d405      	bmi.n	80033fe <_puts_r+0x22>
 80033f2:	89a3      	ldrh	r3, [r4, #12]
 80033f4:	0598      	lsls	r0, r3, #22
 80033f6:	d402      	bmi.n	80033fe <_puts_r+0x22>
 80033f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80033fa:	f000 f99e 	bl	800373a <__retarget_lock_acquire_recursive>
 80033fe:	89a3      	ldrh	r3, [r4, #12]
 8003400:	0719      	lsls	r1, r3, #28
 8003402:	d502      	bpl.n	800340a <_puts_r+0x2e>
 8003404:	6923      	ldr	r3, [r4, #16]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d135      	bne.n	8003476 <_puts_r+0x9a>
 800340a:	4621      	mov	r1, r4
 800340c:	4628      	mov	r0, r5
 800340e:	f000 f8c5 	bl	800359c <__swsetup_r>
 8003412:	b380      	cbz	r0, 8003476 <_puts_r+0x9a>
 8003414:	f04f 35ff 	mov.w	r5, #4294967295
 8003418:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800341a:	07da      	lsls	r2, r3, #31
 800341c:	d405      	bmi.n	800342a <_puts_r+0x4e>
 800341e:	89a3      	ldrh	r3, [r4, #12]
 8003420:	059b      	lsls	r3, r3, #22
 8003422:	d402      	bmi.n	800342a <_puts_r+0x4e>
 8003424:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003426:	f000 f989 	bl	800373c <__retarget_lock_release_recursive>
 800342a:	4628      	mov	r0, r5
 800342c:	bd70      	pop	{r4, r5, r6, pc}
 800342e:	2b00      	cmp	r3, #0
 8003430:	da04      	bge.n	800343c <_puts_r+0x60>
 8003432:	69a2      	ldr	r2, [r4, #24]
 8003434:	429a      	cmp	r2, r3
 8003436:	dc17      	bgt.n	8003468 <_puts_r+0x8c>
 8003438:	290a      	cmp	r1, #10
 800343a:	d015      	beq.n	8003468 <_puts_r+0x8c>
 800343c:	6823      	ldr	r3, [r4, #0]
 800343e:	1c5a      	adds	r2, r3, #1
 8003440:	6022      	str	r2, [r4, #0]
 8003442:	7019      	strb	r1, [r3, #0]
 8003444:	68a3      	ldr	r3, [r4, #8]
 8003446:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800344a:	3b01      	subs	r3, #1
 800344c:	60a3      	str	r3, [r4, #8]
 800344e:	2900      	cmp	r1, #0
 8003450:	d1ed      	bne.n	800342e <_puts_r+0x52>
 8003452:	2b00      	cmp	r3, #0
 8003454:	da11      	bge.n	800347a <_puts_r+0x9e>
 8003456:	4622      	mov	r2, r4
 8003458:	210a      	movs	r1, #10
 800345a:	4628      	mov	r0, r5
 800345c:	f000 f85f 	bl	800351e <__swbuf_r>
 8003460:	3001      	adds	r0, #1
 8003462:	d0d7      	beq.n	8003414 <_puts_r+0x38>
 8003464:	250a      	movs	r5, #10
 8003466:	e7d7      	b.n	8003418 <_puts_r+0x3c>
 8003468:	4622      	mov	r2, r4
 800346a:	4628      	mov	r0, r5
 800346c:	f000 f857 	bl	800351e <__swbuf_r>
 8003470:	3001      	adds	r0, #1
 8003472:	d1e7      	bne.n	8003444 <_puts_r+0x68>
 8003474:	e7ce      	b.n	8003414 <_puts_r+0x38>
 8003476:	3e01      	subs	r6, #1
 8003478:	e7e4      	b.n	8003444 <_puts_r+0x68>
 800347a:	6823      	ldr	r3, [r4, #0]
 800347c:	1c5a      	adds	r2, r3, #1
 800347e:	6022      	str	r2, [r4, #0]
 8003480:	220a      	movs	r2, #10
 8003482:	701a      	strb	r2, [r3, #0]
 8003484:	e7ee      	b.n	8003464 <_puts_r+0x88>
	...

08003488 <puts>:
 8003488:	4b02      	ldr	r3, [pc, #8]	@ (8003494 <puts+0xc>)
 800348a:	4601      	mov	r1, r0
 800348c:	6818      	ldr	r0, [r3, #0]
 800348e:	f7ff bfa5 	b.w	80033dc <_puts_r>
 8003492:	bf00      	nop
 8003494:	20000018 	.word	0x20000018

08003498 <__sread>:
 8003498:	b510      	push	{r4, lr}
 800349a:	460c      	mov	r4, r1
 800349c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034a0:	f000 f8fc 	bl	800369c <_read_r>
 80034a4:	2800      	cmp	r0, #0
 80034a6:	bfab      	itete	ge
 80034a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80034aa:	89a3      	ldrhlt	r3, [r4, #12]
 80034ac:	181b      	addge	r3, r3, r0
 80034ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80034b2:	bfac      	ite	ge
 80034b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80034b6:	81a3      	strhlt	r3, [r4, #12]
 80034b8:	bd10      	pop	{r4, pc}

080034ba <__swrite>:
 80034ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034be:	461f      	mov	r7, r3
 80034c0:	898b      	ldrh	r3, [r1, #12]
 80034c2:	05db      	lsls	r3, r3, #23
 80034c4:	4605      	mov	r5, r0
 80034c6:	460c      	mov	r4, r1
 80034c8:	4616      	mov	r6, r2
 80034ca:	d505      	bpl.n	80034d8 <__swrite+0x1e>
 80034cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034d0:	2302      	movs	r3, #2
 80034d2:	2200      	movs	r2, #0
 80034d4:	f000 f8d0 	bl	8003678 <_lseek_r>
 80034d8:	89a3      	ldrh	r3, [r4, #12]
 80034da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80034de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80034e2:	81a3      	strh	r3, [r4, #12]
 80034e4:	4632      	mov	r2, r6
 80034e6:	463b      	mov	r3, r7
 80034e8:	4628      	mov	r0, r5
 80034ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80034ee:	f000 b8e7 	b.w	80036c0 <_write_r>

080034f2 <__sseek>:
 80034f2:	b510      	push	{r4, lr}
 80034f4:	460c      	mov	r4, r1
 80034f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034fa:	f000 f8bd 	bl	8003678 <_lseek_r>
 80034fe:	1c43      	adds	r3, r0, #1
 8003500:	89a3      	ldrh	r3, [r4, #12]
 8003502:	bf15      	itete	ne
 8003504:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003506:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800350a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800350e:	81a3      	strheq	r3, [r4, #12]
 8003510:	bf18      	it	ne
 8003512:	81a3      	strhne	r3, [r4, #12]
 8003514:	bd10      	pop	{r4, pc}

08003516 <__sclose>:
 8003516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800351a:	f000 b89d 	b.w	8003658 <_close_r>

0800351e <__swbuf_r>:
 800351e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003520:	460e      	mov	r6, r1
 8003522:	4614      	mov	r4, r2
 8003524:	4605      	mov	r5, r0
 8003526:	b118      	cbz	r0, 8003530 <__swbuf_r+0x12>
 8003528:	6a03      	ldr	r3, [r0, #32]
 800352a:	b90b      	cbnz	r3, 8003530 <__swbuf_r+0x12>
 800352c:	f7ff ff20 	bl	8003370 <__sinit>
 8003530:	69a3      	ldr	r3, [r4, #24]
 8003532:	60a3      	str	r3, [r4, #8]
 8003534:	89a3      	ldrh	r3, [r4, #12]
 8003536:	071a      	lsls	r2, r3, #28
 8003538:	d501      	bpl.n	800353e <__swbuf_r+0x20>
 800353a:	6923      	ldr	r3, [r4, #16]
 800353c:	b943      	cbnz	r3, 8003550 <__swbuf_r+0x32>
 800353e:	4621      	mov	r1, r4
 8003540:	4628      	mov	r0, r5
 8003542:	f000 f82b 	bl	800359c <__swsetup_r>
 8003546:	b118      	cbz	r0, 8003550 <__swbuf_r+0x32>
 8003548:	f04f 37ff 	mov.w	r7, #4294967295
 800354c:	4638      	mov	r0, r7
 800354e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003550:	6823      	ldr	r3, [r4, #0]
 8003552:	6922      	ldr	r2, [r4, #16]
 8003554:	1a98      	subs	r0, r3, r2
 8003556:	6963      	ldr	r3, [r4, #20]
 8003558:	b2f6      	uxtb	r6, r6
 800355a:	4283      	cmp	r3, r0
 800355c:	4637      	mov	r7, r6
 800355e:	dc05      	bgt.n	800356c <__swbuf_r+0x4e>
 8003560:	4621      	mov	r1, r4
 8003562:	4628      	mov	r0, r5
 8003564:	f000 fa68 	bl	8003a38 <_fflush_r>
 8003568:	2800      	cmp	r0, #0
 800356a:	d1ed      	bne.n	8003548 <__swbuf_r+0x2a>
 800356c:	68a3      	ldr	r3, [r4, #8]
 800356e:	3b01      	subs	r3, #1
 8003570:	60a3      	str	r3, [r4, #8]
 8003572:	6823      	ldr	r3, [r4, #0]
 8003574:	1c5a      	adds	r2, r3, #1
 8003576:	6022      	str	r2, [r4, #0]
 8003578:	701e      	strb	r6, [r3, #0]
 800357a:	6962      	ldr	r2, [r4, #20]
 800357c:	1c43      	adds	r3, r0, #1
 800357e:	429a      	cmp	r2, r3
 8003580:	d004      	beq.n	800358c <__swbuf_r+0x6e>
 8003582:	89a3      	ldrh	r3, [r4, #12]
 8003584:	07db      	lsls	r3, r3, #31
 8003586:	d5e1      	bpl.n	800354c <__swbuf_r+0x2e>
 8003588:	2e0a      	cmp	r6, #10
 800358a:	d1df      	bne.n	800354c <__swbuf_r+0x2e>
 800358c:	4621      	mov	r1, r4
 800358e:	4628      	mov	r0, r5
 8003590:	f000 fa52 	bl	8003a38 <_fflush_r>
 8003594:	2800      	cmp	r0, #0
 8003596:	d0d9      	beq.n	800354c <__swbuf_r+0x2e>
 8003598:	e7d6      	b.n	8003548 <__swbuf_r+0x2a>
	...

0800359c <__swsetup_r>:
 800359c:	b538      	push	{r3, r4, r5, lr}
 800359e:	4b29      	ldr	r3, [pc, #164]	@ (8003644 <__swsetup_r+0xa8>)
 80035a0:	4605      	mov	r5, r0
 80035a2:	6818      	ldr	r0, [r3, #0]
 80035a4:	460c      	mov	r4, r1
 80035a6:	b118      	cbz	r0, 80035b0 <__swsetup_r+0x14>
 80035a8:	6a03      	ldr	r3, [r0, #32]
 80035aa:	b90b      	cbnz	r3, 80035b0 <__swsetup_r+0x14>
 80035ac:	f7ff fee0 	bl	8003370 <__sinit>
 80035b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035b4:	0719      	lsls	r1, r3, #28
 80035b6:	d422      	bmi.n	80035fe <__swsetup_r+0x62>
 80035b8:	06da      	lsls	r2, r3, #27
 80035ba:	d407      	bmi.n	80035cc <__swsetup_r+0x30>
 80035bc:	2209      	movs	r2, #9
 80035be:	602a      	str	r2, [r5, #0]
 80035c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035c4:	81a3      	strh	r3, [r4, #12]
 80035c6:	f04f 30ff 	mov.w	r0, #4294967295
 80035ca:	e033      	b.n	8003634 <__swsetup_r+0x98>
 80035cc:	0758      	lsls	r0, r3, #29
 80035ce:	d512      	bpl.n	80035f6 <__swsetup_r+0x5a>
 80035d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80035d2:	b141      	cbz	r1, 80035e6 <__swsetup_r+0x4a>
 80035d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80035d8:	4299      	cmp	r1, r3
 80035da:	d002      	beq.n	80035e2 <__swsetup_r+0x46>
 80035dc:	4628      	mov	r0, r5
 80035de:	f000 f8af 	bl	8003740 <_free_r>
 80035e2:	2300      	movs	r3, #0
 80035e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80035e6:	89a3      	ldrh	r3, [r4, #12]
 80035e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80035ec:	81a3      	strh	r3, [r4, #12]
 80035ee:	2300      	movs	r3, #0
 80035f0:	6063      	str	r3, [r4, #4]
 80035f2:	6923      	ldr	r3, [r4, #16]
 80035f4:	6023      	str	r3, [r4, #0]
 80035f6:	89a3      	ldrh	r3, [r4, #12]
 80035f8:	f043 0308 	orr.w	r3, r3, #8
 80035fc:	81a3      	strh	r3, [r4, #12]
 80035fe:	6923      	ldr	r3, [r4, #16]
 8003600:	b94b      	cbnz	r3, 8003616 <__swsetup_r+0x7a>
 8003602:	89a3      	ldrh	r3, [r4, #12]
 8003604:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003608:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800360c:	d003      	beq.n	8003616 <__swsetup_r+0x7a>
 800360e:	4621      	mov	r1, r4
 8003610:	4628      	mov	r0, r5
 8003612:	f000 fa5f 	bl	8003ad4 <__smakebuf_r>
 8003616:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800361a:	f013 0201 	ands.w	r2, r3, #1
 800361e:	d00a      	beq.n	8003636 <__swsetup_r+0x9a>
 8003620:	2200      	movs	r2, #0
 8003622:	60a2      	str	r2, [r4, #8]
 8003624:	6962      	ldr	r2, [r4, #20]
 8003626:	4252      	negs	r2, r2
 8003628:	61a2      	str	r2, [r4, #24]
 800362a:	6922      	ldr	r2, [r4, #16]
 800362c:	b942      	cbnz	r2, 8003640 <__swsetup_r+0xa4>
 800362e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003632:	d1c5      	bne.n	80035c0 <__swsetup_r+0x24>
 8003634:	bd38      	pop	{r3, r4, r5, pc}
 8003636:	0799      	lsls	r1, r3, #30
 8003638:	bf58      	it	pl
 800363a:	6962      	ldrpl	r2, [r4, #20]
 800363c:	60a2      	str	r2, [r4, #8]
 800363e:	e7f4      	b.n	800362a <__swsetup_r+0x8e>
 8003640:	2000      	movs	r0, #0
 8003642:	e7f7      	b.n	8003634 <__swsetup_r+0x98>
 8003644:	20000018 	.word	0x20000018

08003648 <memset>:
 8003648:	4402      	add	r2, r0
 800364a:	4603      	mov	r3, r0
 800364c:	4293      	cmp	r3, r2
 800364e:	d100      	bne.n	8003652 <memset+0xa>
 8003650:	4770      	bx	lr
 8003652:	f803 1b01 	strb.w	r1, [r3], #1
 8003656:	e7f9      	b.n	800364c <memset+0x4>

08003658 <_close_r>:
 8003658:	b538      	push	{r3, r4, r5, lr}
 800365a:	4d06      	ldr	r5, [pc, #24]	@ (8003674 <_close_r+0x1c>)
 800365c:	2300      	movs	r3, #0
 800365e:	4604      	mov	r4, r0
 8003660:	4608      	mov	r0, r1
 8003662:	602b      	str	r3, [r5, #0]
 8003664:	f7fd f9ee 	bl	8000a44 <_close>
 8003668:	1c43      	adds	r3, r0, #1
 800366a:	d102      	bne.n	8003672 <_close_r+0x1a>
 800366c:	682b      	ldr	r3, [r5, #0]
 800366e:	b103      	cbz	r3, 8003672 <_close_r+0x1a>
 8003670:	6023      	str	r3, [r4, #0]
 8003672:	bd38      	pop	{r3, r4, r5, pc}
 8003674:	20000264 	.word	0x20000264

08003678 <_lseek_r>:
 8003678:	b538      	push	{r3, r4, r5, lr}
 800367a:	4d07      	ldr	r5, [pc, #28]	@ (8003698 <_lseek_r+0x20>)
 800367c:	4604      	mov	r4, r0
 800367e:	4608      	mov	r0, r1
 8003680:	4611      	mov	r1, r2
 8003682:	2200      	movs	r2, #0
 8003684:	602a      	str	r2, [r5, #0]
 8003686:	461a      	mov	r2, r3
 8003688:	f7fd fa03 	bl	8000a92 <_lseek>
 800368c:	1c43      	adds	r3, r0, #1
 800368e:	d102      	bne.n	8003696 <_lseek_r+0x1e>
 8003690:	682b      	ldr	r3, [r5, #0]
 8003692:	b103      	cbz	r3, 8003696 <_lseek_r+0x1e>
 8003694:	6023      	str	r3, [r4, #0]
 8003696:	bd38      	pop	{r3, r4, r5, pc}
 8003698:	20000264 	.word	0x20000264

0800369c <_read_r>:
 800369c:	b538      	push	{r3, r4, r5, lr}
 800369e:	4d07      	ldr	r5, [pc, #28]	@ (80036bc <_read_r+0x20>)
 80036a0:	4604      	mov	r4, r0
 80036a2:	4608      	mov	r0, r1
 80036a4:	4611      	mov	r1, r2
 80036a6:	2200      	movs	r2, #0
 80036a8:	602a      	str	r2, [r5, #0]
 80036aa:	461a      	mov	r2, r3
 80036ac:	f7fd f9ad 	bl	8000a0a <_read>
 80036b0:	1c43      	adds	r3, r0, #1
 80036b2:	d102      	bne.n	80036ba <_read_r+0x1e>
 80036b4:	682b      	ldr	r3, [r5, #0]
 80036b6:	b103      	cbz	r3, 80036ba <_read_r+0x1e>
 80036b8:	6023      	str	r3, [r4, #0]
 80036ba:	bd38      	pop	{r3, r4, r5, pc}
 80036bc:	20000264 	.word	0x20000264

080036c0 <_write_r>:
 80036c0:	b538      	push	{r3, r4, r5, lr}
 80036c2:	4d07      	ldr	r5, [pc, #28]	@ (80036e0 <_write_r+0x20>)
 80036c4:	4604      	mov	r4, r0
 80036c6:	4608      	mov	r0, r1
 80036c8:	4611      	mov	r1, r2
 80036ca:	2200      	movs	r2, #0
 80036cc:	602a      	str	r2, [r5, #0]
 80036ce:	461a      	mov	r2, r3
 80036d0:	f7fc ff40 	bl	8000554 <_write>
 80036d4:	1c43      	adds	r3, r0, #1
 80036d6:	d102      	bne.n	80036de <_write_r+0x1e>
 80036d8:	682b      	ldr	r3, [r5, #0]
 80036da:	b103      	cbz	r3, 80036de <_write_r+0x1e>
 80036dc:	6023      	str	r3, [r4, #0]
 80036de:	bd38      	pop	{r3, r4, r5, pc}
 80036e0:	20000264 	.word	0x20000264

080036e4 <__errno>:
 80036e4:	4b01      	ldr	r3, [pc, #4]	@ (80036ec <__errno+0x8>)
 80036e6:	6818      	ldr	r0, [r3, #0]
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	20000018 	.word	0x20000018

080036f0 <__libc_init_array>:
 80036f0:	b570      	push	{r4, r5, r6, lr}
 80036f2:	4d0d      	ldr	r5, [pc, #52]	@ (8003728 <__libc_init_array+0x38>)
 80036f4:	4c0d      	ldr	r4, [pc, #52]	@ (800372c <__libc_init_array+0x3c>)
 80036f6:	1b64      	subs	r4, r4, r5
 80036f8:	10a4      	asrs	r4, r4, #2
 80036fa:	2600      	movs	r6, #0
 80036fc:	42a6      	cmp	r6, r4
 80036fe:	d109      	bne.n	8003714 <__libc_init_array+0x24>
 8003700:	4d0b      	ldr	r5, [pc, #44]	@ (8003730 <__libc_init_array+0x40>)
 8003702:	4c0c      	ldr	r4, [pc, #48]	@ (8003734 <__libc_init_array+0x44>)
 8003704:	f000 fa54 	bl	8003bb0 <_init>
 8003708:	1b64      	subs	r4, r4, r5
 800370a:	10a4      	asrs	r4, r4, #2
 800370c:	2600      	movs	r6, #0
 800370e:	42a6      	cmp	r6, r4
 8003710:	d105      	bne.n	800371e <__libc_init_array+0x2e>
 8003712:	bd70      	pop	{r4, r5, r6, pc}
 8003714:	f855 3b04 	ldr.w	r3, [r5], #4
 8003718:	4798      	blx	r3
 800371a:	3601      	adds	r6, #1
 800371c:	e7ee      	b.n	80036fc <__libc_init_array+0xc>
 800371e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003722:	4798      	blx	r3
 8003724:	3601      	adds	r6, #1
 8003726:	e7f2      	b.n	800370e <__libc_init_array+0x1e>
 8003728:	08003c24 	.word	0x08003c24
 800372c:	08003c24 	.word	0x08003c24
 8003730:	08003c24 	.word	0x08003c24
 8003734:	08003c28 	.word	0x08003c28

08003738 <__retarget_lock_init_recursive>:
 8003738:	4770      	bx	lr

0800373a <__retarget_lock_acquire_recursive>:
 800373a:	4770      	bx	lr

0800373c <__retarget_lock_release_recursive>:
 800373c:	4770      	bx	lr
	...

08003740 <_free_r>:
 8003740:	b538      	push	{r3, r4, r5, lr}
 8003742:	4605      	mov	r5, r0
 8003744:	2900      	cmp	r1, #0
 8003746:	d041      	beq.n	80037cc <_free_r+0x8c>
 8003748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800374c:	1f0c      	subs	r4, r1, #4
 800374e:	2b00      	cmp	r3, #0
 8003750:	bfb8      	it	lt
 8003752:	18e4      	addlt	r4, r4, r3
 8003754:	f000 f8e0 	bl	8003918 <__malloc_lock>
 8003758:	4a1d      	ldr	r2, [pc, #116]	@ (80037d0 <_free_r+0x90>)
 800375a:	6813      	ldr	r3, [r2, #0]
 800375c:	b933      	cbnz	r3, 800376c <_free_r+0x2c>
 800375e:	6063      	str	r3, [r4, #4]
 8003760:	6014      	str	r4, [r2, #0]
 8003762:	4628      	mov	r0, r5
 8003764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003768:	f000 b8dc 	b.w	8003924 <__malloc_unlock>
 800376c:	42a3      	cmp	r3, r4
 800376e:	d908      	bls.n	8003782 <_free_r+0x42>
 8003770:	6820      	ldr	r0, [r4, #0]
 8003772:	1821      	adds	r1, r4, r0
 8003774:	428b      	cmp	r3, r1
 8003776:	bf01      	itttt	eq
 8003778:	6819      	ldreq	r1, [r3, #0]
 800377a:	685b      	ldreq	r3, [r3, #4]
 800377c:	1809      	addeq	r1, r1, r0
 800377e:	6021      	streq	r1, [r4, #0]
 8003780:	e7ed      	b.n	800375e <_free_r+0x1e>
 8003782:	461a      	mov	r2, r3
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	b10b      	cbz	r3, 800378c <_free_r+0x4c>
 8003788:	42a3      	cmp	r3, r4
 800378a:	d9fa      	bls.n	8003782 <_free_r+0x42>
 800378c:	6811      	ldr	r1, [r2, #0]
 800378e:	1850      	adds	r0, r2, r1
 8003790:	42a0      	cmp	r0, r4
 8003792:	d10b      	bne.n	80037ac <_free_r+0x6c>
 8003794:	6820      	ldr	r0, [r4, #0]
 8003796:	4401      	add	r1, r0
 8003798:	1850      	adds	r0, r2, r1
 800379a:	4283      	cmp	r3, r0
 800379c:	6011      	str	r1, [r2, #0]
 800379e:	d1e0      	bne.n	8003762 <_free_r+0x22>
 80037a0:	6818      	ldr	r0, [r3, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	6053      	str	r3, [r2, #4]
 80037a6:	4408      	add	r0, r1
 80037a8:	6010      	str	r0, [r2, #0]
 80037aa:	e7da      	b.n	8003762 <_free_r+0x22>
 80037ac:	d902      	bls.n	80037b4 <_free_r+0x74>
 80037ae:	230c      	movs	r3, #12
 80037b0:	602b      	str	r3, [r5, #0]
 80037b2:	e7d6      	b.n	8003762 <_free_r+0x22>
 80037b4:	6820      	ldr	r0, [r4, #0]
 80037b6:	1821      	adds	r1, r4, r0
 80037b8:	428b      	cmp	r3, r1
 80037ba:	bf04      	itt	eq
 80037bc:	6819      	ldreq	r1, [r3, #0]
 80037be:	685b      	ldreq	r3, [r3, #4]
 80037c0:	6063      	str	r3, [r4, #4]
 80037c2:	bf04      	itt	eq
 80037c4:	1809      	addeq	r1, r1, r0
 80037c6:	6021      	streq	r1, [r4, #0]
 80037c8:	6054      	str	r4, [r2, #4]
 80037ca:	e7ca      	b.n	8003762 <_free_r+0x22>
 80037cc:	bd38      	pop	{r3, r4, r5, pc}
 80037ce:	bf00      	nop
 80037d0:	20000270 	.word	0x20000270

080037d4 <sbrk_aligned>:
 80037d4:	b570      	push	{r4, r5, r6, lr}
 80037d6:	4e0f      	ldr	r6, [pc, #60]	@ (8003814 <sbrk_aligned+0x40>)
 80037d8:	460c      	mov	r4, r1
 80037da:	6831      	ldr	r1, [r6, #0]
 80037dc:	4605      	mov	r5, r0
 80037de:	b911      	cbnz	r1, 80037e6 <sbrk_aligned+0x12>
 80037e0:	f000 f9d6 	bl	8003b90 <_sbrk_r>
 80037e4:	6030      	str	r0, [r6, #0]
 80037e6:	4621      	mov	r1, r4
 80037e8:	4628      	mov	r0, r5
 80037ea:	f000 f9d1 	bl	8003b90 <_sbrk_r>
 80037ee:	1c43      	adds	r3, r0, #1
 80037f0:	d103      	bne.n	80037fa <sbrk_aligned+0x26>
 80037f2:	f04f 34ff 	mov.w	r4, #4294967295
 80037f6:	4620      	mov	r0, r4
 80037f8:	bd70      	pop	{r4, r5, r6, pc}
 80037fa:	1cc4      	adds	r4, r0, #3
 80037fc:	f024 0403 	bic.w	r4, r4, #3
 8003800:	42a0      	cmp	r0, r4
 8003802:	d0f8      	beq.n	80037f6 <sbrk_aligned+0x22>
 8003804:	1a21      	subs	r1, r4, r0
 8003806:	4628      	mov	r0, r5
 8003808:	f000 f9c2 	bl	8003b90 <_sbrk_r>
 800380c:	3001      	adds	r0, #1
 800380e:	d1f2      	bne.n	80037f6 <sbrk_aligned+0x22>
 8003810:	e7ef      	b.n	80037f2 <sbrk_aligned+0x1e>
 8003812:	bf00      	nop
 8003814:	2000026c 	.word	0x2000026c

08003818 <_malloc_r>:
 8003818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800381c:	1ccd      	adds	r5, r1, #3
 800381e:	f025 0503 	bic.w	r5, r5, #3
 8003822:	3508      	adds	r5, #8
 8003824:	2d0c      	cmp	r5, #12
 8003826:	bf38      	it	cc
 8003828:	250c      	movcc	r5, #12
 800382a:	2d00      	cmp	r5, #0
 800382c:	4606      	mov	r6, r0
 800382e:	db01      	blt.n	8003834 <_malloc_r+0x1c>
 8003830:	42a9      	cmp	r1, r5
 8003832:	d904      	bls.n	800383e <_malloc_r+0x26>
 8003834:	230c      	movs	r3, #12
 8003836:	6033      	str	r3, [r6, #0]
 8003838:	2000      	movs	r0, #0
 800383a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800383e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003914 <_malloc_r+0xfc>
 8003842:	f000 f869 	bl	8003918 <__malloc_lock>
 8003846:	f8d8 3000 	ldr.w	r3, [r8]
 800384a:	461c      	mov	r4, r3
 800384c:	bb44      	cbnz	r4, 80038a0 <_malloc_r+0x88>
 800384e:	4629      	mov	r1, r5
 8003850:	4630      	mov	r0, r6
 8003852:	f7ff ffbf 	bl	80037d4 <sbrk_aligned>
 8003856:	1c43      	adds	r3, r0, #1
 8003858:	4604      	mov	r4, r0
 800385a:	d158      	bne.n	800390e <_malloc_r+0xf6>
 800385c:	f8d8 4000 	ldr.w	r4, [r8]
 8003860:	4627      	mov	r7, r4
 8003862:	2f00      	cmp	r7, #0
 8003864:	d143      	bne.n	80038ee <_malloc_r+0xd6>
 8003866:	2c00      	cmp	r4, #0
 8003868:	d04b      	beq.n	8003902 <_malloc_r+0xea>
 800386a:	6823      	ldr	r3, [r4, #0]
 800386c:	4639      	mov	r1, r7
 800386e:	4630      	mov	r0, r6
 8003870:	eb04 0903 	add.w	r9, r4, r3
 8003874:	f000 f98c 	bl	8003b90 <_sbrk_r>
 8003878:	4581      	cmp	r9, r0
 800387a:	d142      	bne.n	8003902 <_malloc_r+0xea>
 800387c:	6821      	ldr	r1, [r4, #0]
 800387e:	1a6d      	subs	r5, r5, r1
 8003880:	4629      	mov	r1, r5
 8003882:	4630      	mov	r0, r6
 8003884:	f7ff ffa6 	bl	80037d4 <sbrk_aligned>
 8003888:	3001      	adds	r0, #1
 800388a:	d03a      	beq.n	8003902 <_malloc_r+0xea>
 800388c:	6823      	ldr	r3, [r4, #0]
 800388e:	442b      	add	r3, r5
 8003890:	6023      	str	r3, [r4, #0]
 8003892:	f8d8 3000 	ldr.w	r3, [r8]
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	bb62      	cbnz	r2, 80038f4 <_malloc_r+0xdc>
 800389a:	f8c8 7000 	str.w	r7, [r8]
 800389e:	e00f      	b.n	80038c0 <_malloc_r+0xa8>
 80038a0:	6822      	ldr	r2, [r4, #0]
 80038a2:	1b52      	subs	r2, r2, r5
 80038a4:	d420      	bmi.n	80038e8 <_malloc_r+0xd0>
 80038a6:	2a0b      	cmp	r2, #11
 80038a8:	d917      	bls.n	80038da <_malloc_r+0xc2>
 80038aa:	1961      	adds	r1, r4, r5
 80038ac:	42a3      	cmp	r3, r4
 80038ae:	6025      	str	r5, [r4, #0]
 80038b0:	bf18      	it	ne
 80038b2:	6059      	strne	r1, [r3, #4]
 80038b4:	6863      	ldr	r3, [r4, #4]
 80038b6:	bf08      	it	eq
 80038b8:	f8c8 1000 	streq.w	r1, [r8]
 80038bc:	5162      	str	r2, [r4, r5]
 80038be:	604b      	str	r3, [r1, #4]
 80038c0:	4630      	mov	r0, r6
 80038c2:	f000 f82f 	bl	8003924 <__malloc_unlock>
 80038c6:	f104 000b 	add.w	r0, r4, #11
 80038ca:	1d23      	adds	r3, r4, #4
 80038cc:	f020 0007 	bic.w	r0, r0, #7
 80038d0:	1ac2      	subs	r2, r0, r3
 80038d2:	bf1c      	itt	ne
 80038d4:	1a1b      	subne	r3, r3, r0
 80038d6:	50a3      	strne	r3, [r4, r2]
 80038d8:	e7af      	b.n	800383a <_malloc_r+0x22>
 80038da:	6862      	ldr	r2, [r4, #4]
 80038dc:	42a3      	cmp	r3, r4
 80038de:	bf0c      	ite	eq
 80038e0:	f8c8 2000 	streq.w	r2, [r8]
 80038e4:	605a      	strne	r2, [r3, #4]
 80038e6:	e7eb      	b.n	80038c0 <_malloc_r+0xa8>
 80038e8:	4623      	mov	r3, r4
 80038ea:	6864      	ldr	r4, [r4, #4]
 80038ec:	e7ae      	b.n	800384c <_malloc_r+0x34>
 80038ee:	463c      	mov	r4, r7
 80038f0:	687f      	ldr	r7, [r7, #4]
 80038f2:	e7b6      	b.n	8003862 <_malloc_r+0x4a>
 80038f4:	461a      	mov	r2, r3
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	42a3      	cmp	r3, r4
 80038fa:	d1fb      	bne.n	80038f4 <_malloc_r+0xdc>
 80038fc:	2300      	movs	r3, #0
 80038fe:	6053      	str	r3, [r2, #4]
 8003900:	e7de      	b.n	80038c0 <_malloc_r+0xa8>
 8003902:	230c      	movs	r3, #12
 8003904:	6033      	str	r3, [r6, #0]
 8003906:	4630      	mov	r0, r6
 8003908:	f000 f80c 	bl	8003924 <__malloc_unlock>
 800390c:	e794      	b.n	8003838 <_malloc_r+0x20>
 800390e:	6005      	str	r5, [r0, #0]
 8003910:	e7d6      	b.n	80038c0 <_malloc_r+0xa8>
 8003912:	bf00      	nop
 8003914:	20000270 	.word	0x20000270

08003918 <__malloc_lock>:
 8003918:	4801      	ldr	r0, [pc, #4]	@ (8003920 <__malloc_lock+0x8>)
 800391a:	f7ff bf0e 	b.w	800373a <__retarget_lock_acquire_recursive>
 800391e:	bf00      	nop
 8003920:	20000268 	.word	0x20000268

08003924 <__malloc_unlock>:
 8003924:	4801      	ldr	r0, [pc, #4]	@ (800392c <__malloc_unlock+0x8>)
 8003926:	f7ff bf09 	b.w	800373c <__retarget_lock_release_recursive>
 800392a:	bf00      	nop
 800392c:	20000268 	.word	0x20000268

08003930 <__sflush_r>:
 8003930:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003938:	0716      	lsls	r6, r2, #28
 800393a:	4605      	mov	r5, r0
 800393c:	460c      	mov	r4, r1
 800393e:	d454      	bmi.n	80039ea <__sflush_r+0xba>
 8003940:	684b      	ldr	r3, [r1, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	dc02      	bgt.n	800394c <__sflush_r+0x1c>
 8003946:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003948:	2b00      	cmp	r3, #0
 800394a:	dd48      	ble.n	80039de <__sflush_r+0xae>
 800394c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800394e:	2e00      	cmp	r6, #0
 8003950:	d045      	beq.n	80039de <__sflush_r+0xae>
 8003952:	2300      	movs	r3, #0
 8003954:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003958:	682f      	ldr	r7, [r5, #0]
 800395a:	6a21      	ldr	r1, [r4, #32]
 800395c:	602b      	str	r3, [r5, #0]
 800395e:	d030      	beq.n	80039c2 <__sflush_r+0x92>
 8003960:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003962:	89a3      	ldrh	r3, [r4, #12]
 8003964:	0759      	lsls	r1, r3, #29
 8003966:	d505      	bpl.n	8003974 <__sflush_r+0x44>
 8003968:	6863      	ldr	r3, [r4, #4]
 800396a:	1ad2      	subs	r2, r2, r3
 800396c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800396e:	b10b      	cbz	r3, 8003974 <__sflush_r+0x44>
 8003970:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003972:	1ad2      	subs	r2, r2, r3
 8003974:	2300      	movs	r3, #0
 8003976:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003978:	6a21      	ldr	r1, [r4, #32]
 800397a:	4628      	mov	r0, r5
 800397c:	47b0      	blx	r6
 800397e:	1c43      	adds	r3, r0, #1
 8003980:	89a3      	ldrh	r3, [r4, #12]
 8003982:	d106      	bne.n	8003992 <__sflush_r+0x62>
 8003984:	6829      	ldr	r1, [r5, #0]
 8003986:	291d      	cmp	r1, #29
 8003988:	d82b      	bhi.n	80039e2 <__sflush_r+0xb2>
 800398a:	4a2a      	ldr	r2, [pc, #168]	@ (8003a34 <__sflush_r+0x104>)
 800398c:	40ca      	lsrs	r2, r1
 800398e:	07d6      	lsls	r6, r2, #31
 8003990:	d527      	bpl.n	80039e2 <__sflush_r+0xb2>
 8003992:	2200      	movs	r2, #0
 8003994:	6062      	str	r2, [r4, #4]
 8003996:	04d9      	lsls	r1, r3, #19
 8003998:	6922      	ldr	r2, [r4, #16]
 800399a:	6022      	str	r2, [r4, #0]
 800399c:	d504      	bpl.n	80039a8 <__sflush_r+0x78>
 800399e:	1c42      	adds	r2, r0, #1
 80039a0:	d101      	bne.n	80039a6 <__sflush_r+0x76>
 80039a2:	682b      	ldr	r3, [r5, #0]
 80039a4:	b903      	cbnz	r3, 80039a8 <__sflush_r+0x78>
 80039a6:	6560      	str	r0, [r4, #84]	@ 0x54
 80039a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80039aa:	602f      	str	r7, [r5, #0]
 80039ac:	b1b9      	cbz	r1, 80039de <__sflush_r+0xae>
 80039ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80039b2:	4299      	cmp	r1, r3
 80039b4:	d002      	beq.n	80039bc <__sflush_r+0x8c>
 80039b6:	4628      	mov	r0, r5
 80039b8:	f7ff fec2 	bl	8003740 <_free_r>
 80039bc:	2300      	movs	r3, #0
 80039be:	6363      	str	r3, [r4, #52]	@ 0x34
 80039c0:	e00d      	b.n	80039de <__sflush_r+0xae>
 80039c2:	2301      	movs	r3, #1
 80039c4:	4628      	mov	r0, r5
 80039c6:	47b0      	blx	r6
 80039c8:	4602      	mov	r2, r0
 80039ca:	1c50      	adds	r0, r2, #1
 80039cc:	d1c9      	bne.n	8003962 <__sflush_r+0x32>
 80039ce:	682b      	ldr	r3, [r5, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0c6      	beq.n	8003962 <__sflush_r+0x32>
 80039d4:	2b1d      	cmp	r3, #29
 80039d6:	d001      	beq.n	80039dc <__sflush_r+0xac>
 80039d8:	2b16      	cmp	r3, #22
 80039da:	d11e      	bne.n	8003a1a <__sflush_r+0xea>
 80039dc:	602f      	str	r7, [r5, #0]
 80039de:	2000      	movs	r0, #0
 80039e0:	e022      	b.n	8003a28 <__sflush_r+0xf8>
 80039e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039e6:	b21b      	sxth	r3, r3
 80039e8:	e01b      	b.n	8003a22 <__sflush_r+0xf2>
 80039ea:	690f      	ldr	r7, [r1, #16]
 80039ec:	2f00      	cmp	r7, #0
 80039ee:	d0f6      	beq.n	80039de <__sflush_r+0xae>
 80039f0:	0793      	lsls	r3, r2, #30
 80039f2:	680e      	ldr	r6, [r1, #0]
 80039f4:	bf08      	it	eq
 80039f6:	694b      	ldreq	r3, [r1, #20]
 80039f8:	600f      	str	r7, [r1, #0]
 80039fa:	bf18      	it	ne
 80039fc:	2300      	movne	r3, #0
 80039fe:	eba6 0807 	sub.w	r8, r6, r7
 8003a02:	608b      	str	r3, [r1, #8]
 8003a04:	f1b8 0f00 	cmp.w	r8, #0
 8003a08:	dde9      	ble.n	80039de <__sflush_r+0xae>
 8003a0a:	6a21      	ldr	r1, [r4, #32]
 8003a0c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003a0e:	4643      	mov	r3, r8
 8003a10:	463a      	mov	r2, r7
 8003a12:	4628      	mov	r0, r5
 8003a14:	47b0      	blx	r6
 8003a16:	2800      	cmp	r0, #0
 8003a18:	dc08      	bgt.n	8003a2c <__sflush_r+0xfc>
 8003a1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a22:	81a3      	strh	r3, [r4, #12]
 8003a24:	f04f 30ff 	mov.w	r0, #4294967295
 8003a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a2c:	4407      	add	r7, r0
 8003a2e:	eba8 0800 	sub.w	r8, r8, r0
 8003a32:	e7e7      	b.n	8003a04 <__sflush_r+0xd4>
 8003a34:	20400001 	.word	0x20400001

08003a38 <_fflush_r>:
 8003a38:	b538      	push	{r3, r4, r5, lr}
 8003a3a:	690b      	ldr	r3, [r1, #16]
 8003a3c:	4605      	mov	r5, r0
 8003a3e:	460c      	mov	r4, r1
 8003a40:	b913      	cbnz	r3, 8003a48 <_fflush_r+0x10>
 8003a42:	2500      	movs	r5, #0
 8003a44:	4628      	mov	r0, r5
 8003a46:	bd38      	pop	{r3, r4, r5, pc}
 8003a48:	b118      	cbz	r0, 8003a52 <_fflush_r+0x1a>
 8003a4a:	6a03      	ldr	r3, [r0, #32]
 8003a4c:	b90b      	cbnz	r3, 8003a52 <_fflush_r+0x1a>
 8003a4e:	f7ff fc8f 	bl	8003370 <__sinit>
 8003a52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d0f3      	beq.n	8003a42 <_fflush_r+0xa>
 8003a5a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003a5c:	07d0      	lsls	r0, r2, #31
 8003a5e:	d404      	bmi.n	8003a6a <_fflush_r+0x32>
 8003a60:	0599      	lsls	r1, r3, #22
 8003a62:	d402      	bmi.n	8003a6a <_fflush_r+0x32>
 8003a64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a66:	f7ff fe68 	bl	800373a <__retarget_lock_acquire_recursive>
 8003a6a:	4628      	mov	r0, r5
 8003a6c:	4621      	mov	r1, r4
 8003a6e:	f7ff ff5f 	bl	8003930 <__sflush_r>
 8003a72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003a74:	07da      	lsls	r2, r3, #31
 8003a76:	4605      	mov	r5, r0
 8003a78:	d4e4      	bmi.n	8003a44 <_fflush_r+0xc>
 8003a7a:	89a3      	ldrh	r3, [r4, #12]
 8003a7c:	059b      	lsls	r3, r3, #22
 8003a7e:	d4e1      	bmi.n	8003a44 <_fflush_r+0xc>
 8003a80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a82:	f7ff fe5b 	bl	800373c <__retarget_lock_release_recursive>
 8003a86:	e7dd      	b.n	8003a44 <_fflush_r+0xc>

08003a88 <__swhatbuf_r>:
 8003a88:	b570      	push	{r4, r5, r6, lr}
 8003a8a:	460c      	mov	r4, r1
 8003a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a90:	2900      	cmp	r1, #0
 8003a92:	b096      	sub	sp, #88	@ 0x58
 8003a94:	4615      	mov	r5, r2
 8003a96:	461e      	mov	r6, r3
 8003a98:	da0d      	bge.n	8003ab6 <__swhatbuf_r+0x2e>
 8003a9a:	89a3      	ldrh	r3, [r4, #12]
 8003a9c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003aa0:	f04f 0100 	mov.w	r1, #0
 8003aa4:	bf14      	ite	ne
 8003aa6:	2340      	movne	r3, #64	@ 0x40
 8003aa8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003aac:	2000      	movs	r0, #0
 8003aae:	6031      	str	r1, [r6, #0]
 8003ab0:	602b      	str	r3, [r5, #0]
 8003ab2:	b016      	add	sp, #88	@ 0x58
 8003ab4:	bd70      	pop	{r4, r5, r6, pc}
 8003ab6:	466a      	mov	r2, sp
 8003ab8:	f000 f848 	bl	8003b4c <_fstat_r>
 8003abc:	2800      	cmp	r0, #0
 8003abe:	dbec      	blt.n	8003a9a <__swhatbuf_r+0x12>
 8003ac0:	9901      	ldr	r1, [sp, #4]
 8003ac2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003ac6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003aca:	4259      	negs	r1, r3
 8003acc:	4159      	adcs	r1, r3
 8003ace:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ad2:	e7eb      	b.n	8003aac <__swhatbuf_r+0x24>

08003ad4 <__smakebuf_r>:
 8003ad4:	898b      	ldrh	r3, [r1, #12]
 8003ad6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ad8:	079d      	lsls	r5, r3, #30
 8003ada:	4606      	mov	r6, r0
 8003adc:	460c      	mov	r4, r1
 8003ade:	d507      	bpl.n	8003af0 <__smakebuf_r+0x1c>
 8003ae0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003ae4:	6023      	str	r3, [r4, #0]
 8003ae6:	6123      	str	r3, [r4, #16]
 8003ae8:	2301      	movs	r3, #1
 8003aea:	6163      	str	r3, [r4, #20]
 8003aec:	b003      	add	sp, #12
 8003aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003af0:	ab01      	add	r3, sp, #4
 8003af2:	466a      	mov	r2, sp
 8003af4:	f7ff ffc8 	bl	8003a88 <__swhatbuf_r>
 8003af8:	9f00      	ldr	r7, [sp, #0]
 8003afa:	4605      	mov	r5, r0
 8003afc:	4639      	mov	r1, r7
 8003afe:	4630      	mov	r0, r6
 8003b00:	f7ff fe8a 	bl	8003818 <_malloc_r>
 8003b04:	b948      	cbnz	r0, 8003b1a <__smakebuf_r+0x46>
 8003b06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b0a:	059a      	lsls	r2, r3, #22
 8003b0c:	d4ee      	bmi.n	8003aec <__smakebuf_r+0x18>
 8003b0e:	f023 0303 	bic.w	r3, r3, #3
 8003b12:	f043 0302 	orr.w	r3, r3, #2
 8003b16:	81a3      	strh	r3, [r4, #12]
 8003b18:	e7e2      	b.n	8003ae0 <__smakebuf_r+0xc>
 8003b1a:	89a3      	ldrh	r3, [r4, #12]
 8003b1c:	6020      	str	r0, [r4, #0]
 8003b1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b22:	81a3      	strh	r3, [r4, #12]
 8003b24:	9b01      	ldr	r3, [sp, #4]
 8003b26:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003b2a:	b15b      	cbz	r3, 8003b44 <__smakebuf_r+0x70>
 8003b2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b30:	4630      	mov	r0, r6
 8003b32:	f000 f81d 	bl	8003b70 <_isatty_r>
 8003b36:	b128      	cbz	r0, 8003b44 <__smakebuf_r+0x70>
 8003b38:	89a3      	ldrh	r3, [r4, #12]
 8003b3a:	f023 0303 	bic.w	r3, r3, #3
 8003b3e:	f043 0301 	orr.w	r3, r3, #1
 8003b42:	81a3      	strh	r3, [r4, #12]
 8003b44:	89a3      	ldrh	r3, [r4, #12]
 8003b46:	431d      	orrs	r5, r3
 8003b48:	81a5      	strh	r5, [r4, #12]
 8003b4a:	e7cf      	b.n	8003aec <__smakebuf_r+0x18>

08003b4c <_fstat_r>:
 8003b4c:	b538      	push	{r3, r4, r5, lr}
 8003b4e:	4d07      	ldr	r5, [pc, #28]	@ (8003b6c <_fstat_r+0x20>)
 8003b50:	2300      	movs	r3, #0
 8003b52:	4604      	mov	r4, r0
 8003b54:	4608      	mov	r0, r1
 8003b56:	4611      	mov	r1, r2
 8003b58:	602b      	str	r3, [r5, #0]
 8003b5a:	f7fc ff7f 	bl	8000a5c <_fstat>
 8003b5e:	1c43      	adds	r3, r0, #1
 8003b60:	d102      	bne.n	8003b68 <_fstat_r+0x1c>
 8003b62:	682b      	ldr	r3, [r5, #0]
 8003b64:	b103      	cbz	r3, 8003b68 <_fstat_r+0x1c>
 8003b66:	6023      	str	r3, [r4, #0]
 8003b68:	bd38      	pop	{r3, r4, r5, pc}
 8003b6a:	bf00      	nop
 8003b6c:	20000264 	.word	0x20000264

08003b70 <_isatty_r>:
 8003b70:	b538      	push	{r3, r4, r5, lr}
 8003b72:	4d06      	ldr	r5, [pc, #24]	@ (8003b8c <_isatty_r+0x1c>)
 8003b74:	2300      	movs	r3, #0
 8003b76:	4604      	mov	r4, r0
 8003b78:	4608      	mov	r0, r1
 8003b7a:	602b      	str	r3, [r5, #0]
 8003b7c:	f7fc ff7e 	bl	8000a7c <_isatty>
 8003b80:	1c43      	adds	r3, r0, #1
 8003b82:	d102      	bne.n	8003b8a <_isatty_r+0x1a>
 8003b84:	682b      	ldr	r3, [r5, #0]
 8003b86:	b103      	cbz	r3, 8003b8a <_isatty_r+0x1a>
 8003b88:	6023      	str	r3, [r4, #0]
 8003b8a:	bd38      	pop	{r3, r4, r5, pc}
 8003b8c:	20000264 	.word	0x20000264

08003b90 <_sbrk_r>:
 8003b90:	b538      	push	{r3, r4, r5, lr}
 8003b92:	4d06      	ldr	r5, [pc, #24]	@ (8003bac <_sbrk_r+0x1c>)
 8003b94:	2300      	movs	r3, #0
 8003b96:	4604      	mov	r4, r0
 8003b98:	4608      	mov	r0, r1
 8003b9a:	602b      	str	r3, [r5, #0]
 8003b9c:	f7fc ff86 	bl	8000aac <_sbrk>
 8003ba0:	1c43      	adds	r3, r0, #1
 8003ba2:	d102      	bne.n	8003baa <_sbrk_r+0x1a>
 8003ba4:	682b      	ldr	r3, [r5, #0]
 8003ba6:	b103      	cbz	r3, 8003baa <_sbrk_r+0x1a>
 8003ba8:	6023      	str	r3, [r4, #0]
 8003baa:	bd38      	pop	{r3, r4, r5, pc}
 8003bac:	20000264 	.word	0x20000264

08003bb0 <_init>:
 8003bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bb2:	bf00      	nop
 8003bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bb6:	bc08      	pop	{r3}
 8003bb8:	469e      	mov	lr, r3
 8003bba:	4770      	bx	lr

08003bbc <_fini>:
 8003bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bbe:	bf00      	nop
 8003bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bc2:	bc08      	pop	{r3}
 8003bc4:	469e      	mov	lr, r3
 8003bc6:	4770      	bx	lr
